<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: algorithm | Zhixingheyi]]></title>
  <link href="http://liuxuan.info/blog/categories/algorithm/atom.xml" rel="self"/>
  <link href="http://liuxuan.info/"/>
  <updated>2012-09-22T18:41:50+08:00</updated>
  <id>http://liuxuan.info/</id>
  <author>
    <name><![CDATA[Foredoomed]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[快速排序复习笔记]]></title>
    <link href="http://liuxuan.info/blog/2011/12/17/quicksort-note/"/>
    <updated>2011-12-17T14:27:00+08:00</updated>
    <id>http://liuxuan.info/blog/2011/12/17/quicksort-note</id>
    <content type="html"><![CDATA[<p>最近晚上躺在床上没事就拿着手机看了几节MIT的公开课《Introduction to Algorithms》，看着看着就觉得自己关于排序算法的原理基本上都忘光了。顿感非常失落，所以特意又对算法复习了一遍，特别是快速排序，这篇博客就是复习笔记，毕竟发表是最好的记忆嘛。</p>

<p>这门课是由两位老师来上的的，一位是<a href="http://people.csail.mit.edu/cel/" title="Charles E.Leiserson">Charles E.Leiserson</a>教授，光听这个名字可能有点陌生，但是如果提到他参与编写的《算法导论》这本书，对于学计算机的人来说那是无人不知无人不晓的经典著作；另一位是80后的Erik Demaine<a href="http://www.csail.mit.edu/user/666" title="Erik Demaine">Erik Demaine</a>，据说此人在20岁时就当上了MIT的教授，真是牛人啊，而且大多数的课也都是由他来讲的。还有一点我比较在意的是一节课的时间大约是1个小时20分钟左右，这跟中国大学的45分钟一节课很不一样，个人觉得这样的时间安排可以使一节课更加连贯，学习效率也会更好。</p>

<!-- more -->

<p>好了，回到正题快速排序上。话说快速排序是被广泛实际应用的排序算法，究其原因就是优秀的时间复杂度，平均为O(n*log(n))和O(n)的空间负责度，但是快速排序不是稳定排序，因为不能保证相同的元素在排序后还是原来的顺序。</p>

<p>快速排序有三个步骤：</p>

<ol>
  <li>从元素列表中选择一个元素，这个元素被称为pivot。</li>
  <li>把所有小于pivot的元素都放到pivot的左边，所有大于pivot的元素都放到pivot的右边，这个过程称为partition。</li>
  <li>在左右两个子列表中迭代步骤2。</li>
</ol>

<p>下面举个例子来说明快速排序的排序过程，假如我们有这样一组数：<code>6 10 13 5 8 3 2 11</code>，并且选取左端点元素<code>6</code>作为初始pivot，那么上面步骤2的过程应该是下面这个样子：</p>

<pre><code>6  5  13  10  8   3   2  11  
6  5   3  10  8  13   2  11  
6  5   3   2  8  13  10  11  
2  5   3   6  8  13  10  11
</code></pre>

<p>因为要把小于pivot的数都放到pivot的左边，而大于等于pivot的数都放到pivot的右边，所以在保证空间复杂度O(n)的前提下，采用一个变量<code>j</code>，初始为pivot的后一个位置，当循环这个数组发现有小于pivot的数时就和<code>j</code>这个位置上的数交换，然后<code>j + 1</code>，等到循环结束后再交换pivot和<code>j</code>位置上的数。当然如果空间够多的话，直接创建两个新数组往里塞更容易一点。到了上面最后一步后，pivot就变成了<code>6</code>，然后再在它的左右子数组中迭代步骤2。</p>

<p>好了，现在我们可以来写代码了，根据上面的思想不难得出下面的代码：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Quicksort1.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">quickSort1</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">,</span> <span class="kt">int</span> <span class="n">p</span><span class="o">,</span> <span class="kt">int</span> <span class="n">q</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">(</span><span class="n">p</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">q</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 选取左端点为pivot</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">pivot</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">p</span><span class="o">];</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">p</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;=</span> <span class="n">q</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">pivot</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// 如果小于pivot则与j+1位置上数交换</span>
</span><span class='line'>      <span class="n">swap</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="o">++</span><span class="n">j</span><span class="o">,</span> <span class="n">i</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;}</span> <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 交换pivot与j位置上的数</span>
</span><span class='line'>  <span class="n">swap</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="n">p</span><span class="o">,</span> <span class="n">j</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 迭代左右子数组</span>
</span><span class='line'>  <span class="n">quickSort1</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="n">p</span><span class="o">,</span> <span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>  <span class="n">quickSort1</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">q</span><span class="o">);</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="n">swap</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>  <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
</span><span class='line'>  <span class="n">array</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>但是这个算法有个缺陷，在已经排序好的数组上性能非常差。所以人们就对原始快速排序算法进行了改进，改进的地方就是pivot的选取，用随机数或者中间位置的数取代最左端的数；还有就是初始化两个指针，分别从数组的两端向pivot扫描，小于pivot的数和大于等于pivot的数直接交换等，具体可以参看这篇文章：<a href="http://www.blogjava.net/killme2008/archive/2010/09/08/quicksort_optimized.html" title="快速排序及优化">快速排序及优化</a>。</p>

<p>我们来看一下经过上述两个方法优化过的快速排序算法：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Quicksort2.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">quickSort2</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">,</span> <span class="kt">int</span> <span class="n">p</span><span class="o">,</span> <span class="kt">int</span> <span class="n">q</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">p</span><span class="o">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">q</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 选中间数为pivot</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">pivot</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="o">(</span><span class="n">q</span> <span class="o">-</span> <span class="n">p</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">];&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;=</span> <span class="n">j</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">while</span> <span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">pivot</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">i</span><span class="o">++;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>		
</span><span class='line'><span class="k">while</span> <span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">pivot</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">j</span><span class="o">--;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 交换小于pivot的数和大于pivot的数</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;=</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">swap</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">);</span>
</span><span class='line'>  <span class="n">i</span><span class="o">++;</span>
</span><span class='line'>  <span class="n">j</span><span class="o">--;</span>
</span><span class='line'> <span class="o">}</span>   <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 迭代</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">p</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">j</span><span class="o">)</span>
</span><span class='line'>    <span class="n">quickSort2</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="n">p</span><span class="o">,</span> <span class="n">j</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">q</span><span class="o">)</span>
</span><span class='line'>    <span class="n">quickSort2</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">q</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>就是这样，快速排序其实蛮简单的，它和冒泡排序的区别就是：在冒泡排序中，数组中的数需要和其他多个数比较，越前面的数比较的次数越多；而快速排序在一次排序中比较的是一个固定的pivot，所以效率要比冒泡排序高很多。</p>

<p>下面是排序算法的比较：</p>

<table class="datalist">
  <thead>
    <tr>
      <th>Sort</th>
      <th>Average</th>
      <th>Best</th>
      <th>Worst</th>
      <th>Space</th>
      <th>Stability</th>
      <th>Remarks</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Bubble sort</td>
      <td>O(n^2)</td>
      <td>O(n^2)</td>
      <td>O(n^2)</td>
      <td>Constant</td>
      <td>Stable</td>
      <td>Always use a modified bubble sort</td>
    </tr>
    <tr>
      <td>Modified Bubble sort</td>
      <td>O(n^2)</td>
      <td>O(n)</td>
      <td>O(n^2)</td>
      <td>Constant</td>
      <td>Stable</td>
      <td>Stops after reaching a sorted array</td>
    </tr>
    <tr>
      <td>Selection Sort</td>
      <td>O(n^2)</td>
      <td>O(n^2)</td>
      <td>O(n^2)</td>
      <td>Constant</td>
      <td>Stable</td>
      <td>Even a perfectly sorted input requires scanning the entire array</td>
    </tr>
    <tr>
      <td>Insertion Sort</td>
      <td>O(n^2)</td>
      <td>O(n)</td>
      <td>O(n^2)</td>
      <td>Constant</td>
      <td>Stable</td>
      <td>In the best case (already sorted), every insert requires constant time</td>
    </tr>
    <tr>
      <td>Heap Sort</td>
      <td>O(nlog(n))</td>
      <td>O(nlog(n))</td>
      <td>O(nlog(n))</td>
      <td>Constant</td>
      <td>Instable</td>
      <td>By using input array as storage for the heap, it is possible to achieve constant space</td>
    </tr>
    <tr>
      <td>Merge Sort</td>
      <td>O(nlog(n))</td>
      <td>O(nlog(n))</td>
      <td>O(nlog(n))</td>
      <td>Depends</td>
      <td>Stable</td>
      <td>On arrays, merge sort requires O(n) space; on linked lists, merge sort requires constant space</td>
    </tr>
    <tr>
      <td>Quicksort</td>
      <td>O(nlog(n))</td>
      <td>O(nlog(n))</td>
      <td>O(n^2)</td>
      <td>Constant</td>
      <td>Stable</td>
      <td>Randomly picking a pivot value (or shuffling the array prior to sorting) can help avoid worst case scenarios such as a perfectly sorted array</td>
    </tr>
  </tbody>
</table>

<p>参考文章</p>

<ol>
  <li><a href="http://www.blogjava.net/killme2008/archive/2010/09/08/quicksort_optimized.html" title="快速排序及优化">快速排序及优化</a>  </li>
  <li><a href="http://www.vogella.de/articles/JavaAlgorithmsQuicksort/article.html" title="Quicksort in Java">Quicksort in Java</a>  </li>
  <li><a href="http://www.cprogramming.com/tutorial/computersciencetheory/sortcomp.html" title="Sorting Algorithm Comparison">Sorting Algorithm Comparison</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
