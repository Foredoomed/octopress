<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: opensource | Zhixingheyi]]></title>
  <link href="http://liuxuan.info/blog/categories/opensource/atom.xml" rel="self"/>
  <link href="http://liuxuan.info/"/>
  <updated>2012-09-22T18:41:50+08:00</updated>
  <id>http://liuxuan.info/</id>
  <author>
    <name><![CDATA[Foredoomed]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[myBatis源码分析之映射]]></title>
    <link href="http://liuxuan.info/blog/2011/10/24/mybatis-source-code-analysis-mapping/"/>
    <updated>2011-10-24T20:35:00+08:00</updated>
    <id>http://liuxuan.info/blog/2011/10/24/mybatis-source-code-analysis-mapping</id>
    <content type="html"><![CDATA[<p><strong>1.包结构分析</strong></p>

<table border="1" width="100%" cellpadding="3" cellspacing="0" summary="">
<tbody><tr>
<th align="left" colspan="2" style="background-color:#CCCCFF">
<b>Packages</b></th></tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.builder</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.builder.annotation</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.builder.xml</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.mapping</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.parsing</b></td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>

<p>myBatis在XML解析方面的包结构相对于iBatis精简了不少，而且还加入了对注解的支持。在myatis中除了在XML文件内映射SQ外，我们还可以用注解来映射SQL。当然，这样做的好处和坏处都有，网上讨论也很多，在选择的时候要做好充分考虑。</p>

<p><strong>2.源码分析</strong></p>

<p>myBatis相对于iBatis变化还是很大的，iBatis的客户端接口SqlMapClient在myBatis中已经不复存在，取而代之的是SqlSession接口，接下来我们就来看看SqlSession接口是怎么创建的。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>SqlSessionFactoryBuilder.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">SqlSessionFactory</span> <span class="nf">build</span><span class="o">(</span><span class="n">Reader</span> <span class="n">reader</span><span class="o">,</span> <span class="n">String</span> <span class="n">environment</span><span class="o">,</span> <span class="n">Properties</span> <span class="n">properties</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">XMLConfigBuilder</span> <span class="n">parser</span> <span class="o">=</span> <span class="k">new</span> <span class="n">XMLConfigBuilder</span><span class="o">(</span><span class="n">reader</span><span class="o">,</span> <span class="n">environment</span><span class="o">,</span> <span class="n">properties</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="nf">build</span><span class="o">(</span><span class="n">parser</span><span class="o">.</span><span class="na">parse</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="n">ExceptionFactory</span><span class="o">.</span><span class="na">wrapException</span><span class="o">(</span><span class="err">“</span><span class="n">Error</span> <span class="n">building</span> <span class="n">SqlSession</span><span class="o">.</span><span class="err">”</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">ErrorContext</span><span class="o">.</span><span class="na">instance</span><span class="o">().</span><span class="na">reset</span><span class="o">();</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">reader</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Intentionally ignore. Prefer previous error.</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="n">SqlSessionFactory</span> <span class="n">build</span><span class="o">(</span><span class="n">Configuration</span> <span class="n">config</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">DefaultSqlSessionFactory</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在SqlSessionFactoryBuilder中定义了许多重载的build方法，其他build方法再调用上面的有三个参数的build方法，在其中创建XMLConfigBuilder对象解析XML文件，然后再调用以Configuration为参数的build方法返回DefaultSqlSessionFactory对象。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>XMLConfigBuilder.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">parseConfiguration</span><span class="o">(</span><span class="n">XNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">typeAliasesElement</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">evalNode</span><span class="o">(</span><span class="err">“</span><span class="n">typeAliases</span><span class="err">”</span><span class="o">));</span>
</span><span class='line'>      <span class="n">pluginElement</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">evalNode</span><span class="o">(</span><span class="err">“</span><span class="n">plugins</span><span class="err">”</span><span class="o">));</span>
</span><span class='line'>      <span class="n">objectFactoryElement</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">evalNode</span><span class="o">(</span><span class="err">“</span><span class="n">objectFactory</span><span class="err">”</span><span class="o">));</span>
</span><span class='line'>      <span class="n">objectWrapperFactoryElement</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">evalNode</span><span class="o">(</span><span class="err">“</span><span class="n">objectWrapperFactory</span><span class="err">”</span><span class="o">));</span>
</span><span class='line'>      <span class="n">propertiesElement</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">evalNode</span><span class="o">(</span><span class="err">“</span><span class="n">properties</span><span class="err">”</span><span class="o">));</span>
</span><span class='line'>      <span class="n">settingsElement</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">evalNode</span><span class="o">(</span><span class="err">“</span><span class="n">settings</span><span class="err">”</span><span class="o">));</span>
</span><span class='line'>      <span class="n">environmentsElement</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">evalNode</span><span class="o">(</span><span class="err">“</span><span class="n">environments</span><span class="err">”</span><span class="o">));</span>
</span><span class='line'>      <span class="n">typeHandlerElement</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">evalNode</span><span class="o">(</span><span class="err">“</span><span class="n">typeHandlers</span><span class="err">”</span><span class="o">));</span>
</span><span class='line'>      <span class="n">mapperElement</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">evalNode</span><span class="o">(</span><span class="err">“</span><span class="n">mappers</span><span class="err">”</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">BuilderException</span><span class="o">(</span><span class="err">“</span><span class="n">Error</span> <span class="n">parsing</span> <span class="n">SQL</span> <span class="n">Mapper</span> <span class="n">Configuration</span><span class="o">.</span> <span class="nl">Cause:</span> <span class="err">“</span> <span class="o">+</span> <span class="n">e</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">…</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>XMLConfigBuilder类也重载了许多的构造方法，但是最终调用的还是有三个参数的构造方法。在parse方法中调用parseConfiguration方法解析在configuration.xml中所有的配置项。myBatis定义了一个XNode类用来辅助解析：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>XNode.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">private</span> <span class="n">Properties</span> <span class="nf">parseAttributes</span><span class="o">(</span><span class="n">Node</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Properties</span> <span class="n">attributes</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
</span><span class='line'>    <span class="n">NamedNodeMap</span> <span class="n">attributeNodes</span> <span class="o">=</span> <span class="n">n</span><span class="o">.</span><span class="na">getAttributes</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">attributeNodes</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">attributeNodes</span><span class="o">.</span><span class="na">getLength</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Node</span> <span class="n">attribute</span> <span class="o">=</span> <span class="n">attributeNodes</span><span class="o">.</span><span class="na">item</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">PropertyParser</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">attribute</span><span class="o">.</span><span class="na">getNodeValue</span><span class="o">(),</span> <span class="n">variables</span><span class="o">);</span>
</span><span class='line'>        <span class="n">attributes</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">attribute</span><span class="o">.</span><span class="na">getNodeName</span><span class="o">(),</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">attributes</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">private</span> <span class="n">Object</span> <span class="n">evaluate</span><span class="o">(</span><span class="n">String</span> <span class="n">expression</span><span class="o">,</span> <span class="n">Object</span> <span class="n">root</span><span class="o">,</span> <span class="n">QName</span> <span class="n">returnType</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">xpath</span><span class="o">.</span><span class="na">evaluate</span><span class="o">(</span><span class="n">expression</span><span class="o">,</span> <span class="n">root</span><span class="o">,</span> <span class="n">returnType</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">BuilderException</span><span class="o">(</span><span class="err">“</span><span class="n">Error</span> <span class="n">evaluating</span> <span class="n">XPath</span><span class="o">.</span>  <span class="nl">Cause:</span> <span class="err">“</span> <span class="o">+</span> <span class="n">e</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在XPathParser类中读取XML文件流创建Document类，而且其中定义了许多evalXXX方法，而后最终调用的是XPath类的evaluate方法。而且在XNode中一个SQL的映射片段XML会被解析后存放到一个Properties类中。那么现在就能明白为什么与解析相关的包精简了很多：就是因为iBatis是用SAX方式解析，而myBatis直接调用JDK自带的XPath的API解析，所以省去了许多工作，不用去自定义元素类型，这样做的结果就是整个包结构得到了精简，而且解析性能更好。</p>

<p>下面来看一下SQL的映射过程：首先在XMLConfigBuilder中的mapperElement方法中会创建XMLMapperBuilder对象，然后再调用它的parse方法。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>XMLMapperBuilder.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">parsePendingStatements</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>	  <span class="n">Collection</span><span class="o">&lt;</span><span class="n">xmlstatementbuilder</span><span class="o">&gt;</span> <span class="n">incompleteStatements</span> <span class="o">=</span> <span class="n">configuration</span><span class="o">.</span><span class="na">getIncompleteStatements</span><span class="o">();</span>
</span><span class='line'>	  <span class="kd">synchronized</span> <span class="o">(</span><span class="n">incompleteStatements</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>		  <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">xmlstatementbuilder</span><span class="o">&gt;</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">incompleteStatements</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
</span><span class='line'>		  <span class="k">while</span> <span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>			  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>				  <span class="n">iter</span><span class="o">.</span><span class="na">next</span><span class="o">().</span><span class="na">parseStatementNode</span><span class="o">();</span>
</span><span class='line'>				  <span class="n">iter</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
</span><span class='line'>			  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IncompleteStatementException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>				  <span class="c1">// Statement is still missing a resource...</span>
</span><span class='line'>			  <span class="o">}</span>
</span><span class='line'>		  <span class="o">}</span>
</span><span class='line'>	  <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></xmlstatementbuilder></xmlstatementbuilder></p>

<p>我们可以看到在parsePendingStatements方法中调用的是XMLStatementBuilder的parseStatementNode方法，所以我们继续跟踪。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>XMLStatementBuilder.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">parseStatementNode</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="err">…</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">SqlSource</span> <span class="n">sqlSource</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DynamicSqlSource</span><span class="o">(</span><span class="n">configuration</span><span class="o">,</span> <span class="n">rootSqlNode</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>SQL的配置被读取进来后保存到了SqlSource接口的实例DynamicSqlSource类中，其他是对参数，返回值和主键的解析。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>DynamicSqlSource.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">public</span> <span class="n">BoundSql</span> <span class="nf">getBoundSql</span><span class="o">(</span><span class="n">Object</span> <span class="n">parameterObject</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">DynamicContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DynamicContext</span><span class="o">(</span><span class="n">configuration</span><span class="o">,</span> <span class="n">parameterObject</span><span class="o">);</span>
</span><span class='line'>    <span class="n">rootSqlNode</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>    <span class="n">SqlSourceBuilder</span> <span class="n">sqlSourceParser</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SqlSourceBuilder</span><span class="o">(</span><span class="n">configuration</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Class</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;?&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">parameterType</span> <span class="o">=</span> <span class="n">parameterObject</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="n">Object</span><span class="o">.</span><span class="na">class</span> <span class="o">:</span> <span class="n">parameterObject</span><span class="o">.</span><span class="na">getClass</span><span class="o">();</span>
</span><span class='line'>    <span class="n">SqlSource</span> <span class="n">sqlSource</span> <span class="o">=</span> <span class="n">sqlSourceParser</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">getSql</span><span class="o">(),</span> <span class="n">parameterType</span><span class="o">);</span>
</span><span class='line'>    <span class="n">BoundSql</span> <span class="n">boundSql</span> <span class="o">=</span> <span class="n">sqlSource</span><span class="o">.</span><span class="na">getBoundSql</span><span class="o">(</span><span class="n">parameterObject</span><span class="o">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">string</span> <span class="o">,</span> <span class="n">Object</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">context</span><span class="o">.</span><span class="na">getBindings</span><span class="o">().</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">boundSql</span><span class="o">.</span><span class="na">setAdditionalParameter</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">(),</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">boundSql</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>没什么好说的，创建SqlSourceBuilder类再调用它的parse方法。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>SqlSourceBuilder.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">public</span> <span class="n">SqlSource</span> <span class="nf">parse</span><span class="o">(</span><span class="n">String</span> <span class="n">originalSql</span><span class="o">,</span> <span class="n">Class</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;?&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">parameterType</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ParameterMappingTokenHandler</span> <span class="n">handler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ParameterMappingTokenHandler</span><span class="o">(</span><span class="n">configuration</span><span class="o">,</span> <span class="n">parameterType</span><span class="o">);</span>
</span><span class='line'>    <span class="n">GenericTokenParser</span> <span class="n">parser</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GenericTokenParser</span><span class="o">(</span><span class="err">“#</span><span class="o">{</span><span class="err">“</span><span class="o">,</span> <span class="err">“</span><span class="o">}</span><span class="err">”</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">originalSql</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">StaticSqlSource</span><span class="o">(</span><span class="n">configuration</span><span class="o">,</span> <span class="n">sql</span><span class="o">,</span> <span class="n">handler</span><span class="o">.</span><span class="na">getParameterMappings</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在parse方法里又创建了GenericTokenParser类，然后调用它的parse方法去解析SQL。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>GenericTokenParser.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">parse</span><span class="o">(</span><span class="n">String</span> <span class="n">text</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">StringBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">text</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">after</span> <span class="o">=</span> <span class="n">text</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="n">after</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="n">openToken</span><span class="o">);</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">end</span> <span class="o">=</span> <span class="n">after</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="n">closeToken</span><span class="o">);</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">(</span><span class="n">start</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">end</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">start</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">String</span> <span class="n">before</span> <span class="o">=</span> <span class="n">after</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">start</span><span class="o">);</span>
</span><span class='line'>          <span class="n">String</span> <span class="n">content</span> <span class="o">=</span> <span class="n">after</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">openToken</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span> <span class="n">end</span><span class="o">);</span>
</span><span class='line'>          <span class="n">String</span> <span class="n">substitution</span> <span class="o">=</span> <span class="n">handler</span><span class="o">.</span><span class="na">handleToken</span><span class="o">(</span><span class="n">content</span><span class="o">);</span>
</span><span class='line'>          <span class="n">builder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">before</span><span class="o">);</span>
</span><span class='line'>          <span class="n">builder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">substitution</span><span class="o">);</span>
</span><span class='line'>          <span class="n">after</span> <span class="o">=</span> <span class="n">after</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">end</span> <span class="o">+</span> <span class="n">closeToken</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">end</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">String</span> <span class="n">before</span> <span class="o">=</span> <span class="n">after</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
</span><span class='line'>          <span class="n">builder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">before</span><span class="o">);</span>
</span><span class='line'>          <span class="n">builder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">closeToken</span><span class="o">);</span>
</span><span class='line'>          <span class="n">after</span> <span class="o">=</span> <span class="n">after</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">end</span> <span class="o">+</span> <span class="n">closeToken</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">start</span> <span class="o">=</span> <span class="n">after</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="n">openToken</span><span class="o">);</span>
</span><span class='line'>        <span class="n">end</span> <span class="o">=</span> <span class="n">after</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="n">closeToken</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">builder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">after</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">builder</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>parse方法的目的和iBatis是一样的，是要把形如</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="k">TABLE</span> <span class="k">WHERE</span> <span class="n">ID</span> <span class="o">=</span> <span class="o">#</span><span class="err">{</span><span class="n">ID</span><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>转换成</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="k">TABLE</span> <span class="k">WHERE</span> <span class="n">ID</span> <span class="o">=</span> <span class="err">？</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>到这里为止，整个解析过程就结束了，所有解析得到的配置都会保存到MappedStatement类中。</p>

<p><strong>总结</strong></p>

<p>这篇博文是iBatis和myBatis源码分析系列的最后一篇，也是最长的一篇。我觉得这只能算是粗略的源码分析，因为只分析了主要的几个部分，其他非常细节的地方并没有去做研究。四篇博文写下来给我的感觉是myBatis在代码结构和质量上相较iBatis都有比较大的提高，但是有些地方还是感觉有点复杂和罗嗦，代码读起来不是那么的清晰。有些类中的重载方法非常多，如果可以适当减少一些的话可以提高代码的可读性；还有可以对参数绑定做一个归纳，减少BaseTypeHandler类的实现类等。</p>

<p>虽然iBatis或者myBatis很轻量也很好用，但是就像我在第一篇概览中说的那样，现在Java平台上ORM框架大多数都是基于POJO和XML之上的，这样做的后果就是对象贫血，开放速度变慢。POJO什么时候会被抛弃我不知道，但是我相信会有那一天的。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iBatis源码分析之映射]]></title>
    <link href="http://liuxuan.info/blog/2011/10/23/ibatis-source-code-analysis-mapping/"/>
    <updated>2011-10-23T19:14:00+08:00</updated>
    <id>http://liuxuan.info/blog/2011/10/23/ibatis-source-code-analysis-mapping</id>
    <content type="html"><![CDATA[<p><strong>1.包结构分析</strong></p>

<table border="1" width="100%" cellpadding="3" cellspacing="0" summary="">
<tbody><tr>
<th align="left" colspan="2" style="background-color:#CCCCFF">
<b>Packages</b></th></tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.builder.xml</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.common.xml</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.mapping.parameter</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.mapping.result</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.mapping.result.loader</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.mapping.sql</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.mapping.sql.dynamic</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.mapping.sql.dynamic.elements</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.mapping.sql.raw</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.mapping.sql.simple</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.mapping.sql.stat</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.mapping.statement</b></td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>

<p>iBatis处理映射的包结构应该说还是比较清晰的，基本上看到包名就可以知道包下面的类是做什么用的。但是我们看到关于映射的包一共有10个，但是像dynamic，raw，simple，stat这些包下都只有一个类，显然这种分法是有问题的，我们应当尽可能地减少包，包越少结构就越清晰，但并不是说把类都放一个包下，要在这两者之间寻求平衡。 <!--more--></p>

<p><strong>2.源码分析</strong></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>SqlMapClientBuilder.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">SqlMapClient</span> <span class="nf">buildSqlMapClient</span><span class="o">(</span><span class="n">Reader</span> <span class="n">reader</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">SqlMapConfigParser</span><span class="o">().</span><span class="na">parse</span><span class="o">(</span><span class="n">reader</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>我们要对数据库操作，首先要创建SqlMapClient接口，而SqlMapClientBuilder类就是用来创建SqlMapClient接口的。在buildSqlMapClient方法里创建了SqlMapConfigParser类，然后再调用该类的parse方法来解析XML配置文件。其实代码读到这里就可以看出SqlMapClient接口是线程安全的。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>SqlMapConfigParser.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">SqlMapConfigParser</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">parser</span><span class="o">.</span><span class="na">setValidation</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>    <span class="n">parser</span><span class="o">.</span><span class="na">setEntityResolver</span><span class="o">(</span><span class="k">new</span> <span class="n">SqlMapClasspathEntityResolver</span><span class="o">());&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">addSqlMapConfigNodelets</span><span class="o">();</span>
</span><span class='line'><span class="n">addGlobalPropNodelets</span><span class="o">();</span>
</span><span class='line'><span class="n">addSettingsNodelets</span><span class="o">();</span>
</span><span class='line'><span class="n">addTypeAliasNodelets</span><span class="o">();</span>
</span><span class='line'><span class="n">addTypeHandlerNodelets</span><span class="o">();</span>
</span><span class='line'><span class="n">addTransactionManagerNodelets</span><span class="o">();</span>
</span><span class='line'><span class="n">addSqlMapNodelets</span><span class="o">();</span>
</span><span class='line'><span class="n">addResultObjectFactoryNodelets</span><span class="o">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>首先在创建SqlMapConfigParser类的时候就会为NodeletParser类预先定义好XML文件里各种DOM类型的解析方法，这个是通过实现Nodelet接口的process方法来实现的(Nodelet实际上就是回调接口)。我们可以看到iBatis对各种DOM类型自定义了一套表示方法，他们的定义在NodeletParser类里。在SqlMapConfigParser类的parse方法里再调用NodeletParser的parse方法解析XML文件。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>NodeletParser.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Registers a nodelet for the specified XPath.  Current XPaths supported</span>
</span><span class='line'><span class="cm">   * are:</span>
</span><span class='line'><span class="cm">   * &amp;lt;ul&amp;gt;</span>
</span><span class='line'><span class="cm">   * &amp;lt;li&amp;gt; Text Path - /rootElement/childElement/text()</span>
</span><span class='line'><span class="cm">   * &amp;lt;li&amp;gt; Attribute Path  - /rootElement/childElement/@theAttribute</span>
</span><span class='line'><span class="cm">   * &amp;lt;li&amp;gt; Element Path - /rootElement/childElement/theElement</span>
</span><span class='line'><span class="cm">   * &amp;lt;li&amp;gt; All Elements Named - //theElement</span>
</span><span class='line'><span class="cm">   * &amp;lt;/ul&amp;gt;</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addNodelet</span><span class="o">(</span><span class="n">String</span> <span class="n">xpath</span><span class="o">,</span> <span class="n">Nodelet</span> <span class="n">nodelet</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">letMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">xpath</span><span class="o">,</span> <span class="n">nodelet</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm">   * A recursive method that walkes the DOM tree, registers XPaths and</span>
</span><span class='line'><span class="cm">   * calls Nodelets registered under those XPaths.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="n">Node</span> <span class="n">node</span><span class="o">,</span> <span class="n">Path</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="k">instanceof</span> <span class="n">Element</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Element</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">elementName</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">getNodeName</span><span class="o">();</span>
</span><span class='line'>      <span class="n">path</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">elementName</span><span class="o">);</span>
</span><span class='line'>      <span class="n">processNodelet</span><span class="o">(</span><span class="n">node</span><span class="o">,</span> <span class="n">path</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>      <span class="n">processNodelet</span><span class="o">(</span><span class="n">node</span><span class="o">,</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">(</span><span class="err">“</span><span class="c1">//”).append(elementName).toString());&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="c1">// Attribute</span>
</span><span class='line'>  <span class="n">NamedNodeMap</span> <span class="n">attributes</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">getAttributes</span><span class="o">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">.</span><span class="na">getLength</span><span class="o">();</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Node</span> <span class="n">att</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">.</span><span class="na">item</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">attrName</span> <span class="o">=</span> <span class="n">att</span><span class="o">.</span><span class="na">getNodeName</span><span class="o">();</span>
</span><span class='line'>    <span class="n">path</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;@&quot;</span> <span class="o">+</span> <span class="n">attrName</span><span class="o">);</span>
</span><span class='line'>    <span class="n">processNodelet</span><span class="o">(</span><span class="n">att</span><span class="o">,</span> <span class="n">path</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>    <span class="n">processNodelet</span><span class="o">(</span><span class="n">node</span><span class="o">,</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">(</span><span class="s">&quot;//@&quot;</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">attrName</span><span class="o">).</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>    <span class="n">path</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Children</span>
</span><span class='line'>  <span class="n">NodeList</span> <span class="n">children</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">getChildNodes</span><span class="o">();</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">children</span><span class="o">.</span><span class="na">getLength</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">process</span><span class="o">(</span><span class="n">children</span><span class="o">.</span><span class="na">item</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">path</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">path</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;end()&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">processNodelet</span><span class="o">(</span><span class="n">node</span><span class="o">,</span> <span class="n">path</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>  <span class="n">path</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
</span><span class='line'>  <span class="n">path</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="k">instanceof</span> <span class="n">Text</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// Text</span>
</span><span class='line'>  <span class="n">path</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;text()&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">processNodelet</span><span class="o">(</span><span class="n">node</span><span class="o">,</span> <span class="n">path</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>  <span class="n">processNodelet</span><span class="o">(</span><span class="n">node</span><span class="o">,</span> <span class="s">&quot;//text()&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">path</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>   <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">…</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>解析XML采用的是SAX方式，为了区分XML中的元素类型自定义了一套XPath，然后根据XPath进行相应的处理。processNodelet方法里调用Nodelet接口的process方法，而这个process方法已经在创建SqlMapConfigParser类的时候实现了。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>SqlStatementParser.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SqlStatementParser</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">parseGeneralStatement</span><span class="o">(</span><span class="n">Node</span> <span class="n">node</span><span class="o">,</span> <span class="n">MappedStatement</span> <span class="n">statement</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// get attributes</span>
</span><span class='line'><span class="n">Properties</span> <span class="n">attributes</span> <span class="o">=</span> <span class="n">NodeletUtils</span><span class="o">.</span><span class="na">parseAttributes</span><span class="o">(</span><span class="n">node</span><span class="o">,</span> <span class="n">state</span><span class="o">.</span><span class="na">getGlobalProps</span><span class="o">());</span>
</span><span class='line'><span class="n">String</span> <span class="n">id</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">parameterMapName</span> <span class="o">=</span> <span class="n">state</span><span class="o">.</span><span class="na">applyNamespace</span><span class="o">(</span><span class="n">attributes</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;parameterMap&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">String</span> <span class="n">parameterClassName</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;parameterClass&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">resultMapName</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;resultMap&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">resultClassName</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;resultClass&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">cacheModelName</span> <span class="o">=</span> <span class="n">state</span><span class="o">.</span><span class="na">applyNamespace</span><span class="o">(</span><span class="n">attributes</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;cacheModel&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">String</span> <span class="n">xmlResultName</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;xmlResultName&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">resultSetType</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;resultSetType&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">fetchSize</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;fetchSize&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">allowRemapping</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;remapResults&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">timeout</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;timeout&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="na">isUseStatementNamespaces</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">id</span> <span class="o">=</span> <span class="n">state</span><span class="o">.</span><span class="na">applyNamespace</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">String</span><span class="o">[]</span> <span class="n">additionalResultMapNames</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">resultMapName</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">additionalResultMapNames</span> <span class="o">=</span> <span class="n">state</span><span class="o">.</span><span class="na">getAllButFirstToken</span><span class="o">(</span><span class="n">resultMapName</span><span class="o">);</span>
</span><span class='line'>  <span class="n">resultMapName</span> <span class="o">=</span> <span class="n">state</span><span class="o">.</span><span class="na">getFirstToken</span><span class="o">(</span><span class="n">resultMapName</span><span class="o">);</span>
</span><span class='line'>  <span class="n">resultMapName</span> <span class="o">=</span> <span class="n">state</span><span class="o">.</span><span class="na">applyNamespace</span><span class="o">(</span><span class="n">resultMapName</span><span class="o">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">additionalResultMapNames</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">additionalResultMapNames</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">state</span><span class="o">.</span><span class="na">applyNamespace</span><span class="o">(</span><span class="n">additionalResultMapNames</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">String</span><span class="o">[]</span> <span class="n">additionalResultClassNames</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">resultClassName</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">additionalResultClassNames</span> <span class="o">=</span> <span class="n">state</span><span class="o">.</span><span class="na">getAllButFirstToken</span><span class="o">(</span><span class="n">resultClassName</span><span class="o">);</span>
</span><span class='line'>  <span class="n">resultClassName</span> <span class="o">=</span> <span class="n">state</span><span class="o">.</span><span class="na">getFirstToken</span><span class="o">(</span><span class="n">resultClassName</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">Class</span><span class="o">[]</span> <span class="n">additionalResultClasses</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">additionalResultClassNames</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">additionalResultClasses</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Class</span><span class="o">[</span><span class="n">additionalResultClassNames</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">additionalResultClassNames</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">additionalResultClasses</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">resolveClass</span><span class="o">(</span><span class="n">additionalResultClassNames</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">state</span><span class="o">.</span><span class="na">getConfig</span><span class="o">().</span><span class="na">getErrorContext</span><span class="o">().</span><span class="na">setMoreInfo</span><span class="o">(</span><span class="s">&quot;Check the parameter class.&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">Class</span> <span class="n">parameterClass</span> <span class="o">=</span> <span class="n">resolveClass</span><span class="o">(</span><span class="n">parameterClassName</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">state</span><span class="o">.</span><span class="na">getConfig</span><span class="o">().</span><span class="na">getErrorContext</span><span class="o">().</span><span class="na">setMoreInfo</span><span class="o">(</span><span class="s">&quot;Check the result class.&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">Class</span> <span class="n">resultClass</span> <span class="o">=</span> <span class="n">resolveClass</span><span class="o">(</span><span class="n">resultClassName</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">Integer</span> <span class="n">timeoutInt</span> <span class="o">=</span> <span class="n">timeout</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="n">timeout</span><span class="o">);</span>
</span><span class='line'><span class="n">Integer</span> <span class="n">fetchSizeInt</span> <span class="o">=</span> <span class="n">fetchSize</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="n">fetchSize</span><span class="o">);</span>
</span><span class='line'><span class="kt">boolean</span> <span class="n">allowRemappingBool</span> <span class="o">=</span> <span class="s">&quot;true&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">allowRemapping</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">MappedStatementConfig</span> <span class="n">statementConf</span> <span class="o">=</span> <span class="n">state</span><span class="o">.</span><span class="na">getConfig</span><span class="o">().</span><span class="na">newMappedStatementConfig</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">statement</span><span class="o">,</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">XMLSqlSource</span><span class="o">(</span><span class="n">state</span><span class="o">,</span> <span class="n">node</span><span class="o">),</span> <span class="n">parameterMapName</span><span class="o">,</span> <span class="n">parameterClass</span><span class="o">,</span> <span class="n">resultMapName</span><span class="o">,</span> <span class="n">additionalResultMapNames</span><span class="o">,</span>
</span><span class='line'>    <span class="n">resultClass</span><span class="o">,</span> <span class="n">additionalResultClasses</span><span class="o">,</span> <span class="n">resultSetType</span><span class="o">,</span> <span class="n">fetchSizeInt</span><span class="o">,</span> <span class="n">allowRemappingBool</span><span class="o">,</span> <span class="n">timeoutInt</span><span class="o">,</span> <span class="n">cacheModelName</span><span class="o">,</span>
</span><span class='line'>    <span class="n">xmlResultName</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">findAndParseSelectKey</span><span class="o">(</span><span class="n">node</span><span class="o">,</span> <span class="n">statementConf</span><span class="o">);</span>   <span class="o">}</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>在SqlStatementParser类的parseGeneralStatement方法中创建MappedStatementConfig对象。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>MappedStatementConfig.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">MappedStatementConfig</span><span class="o">(</span><span class="n">SqlMapConfiguration</span> <span class="n">config</span><span class="o">,</span> <span class="n">String</span> <span class="n">id</span><span class="o">,</span> <span class="n">MappedStatement</span> <span class="n">statement</span><span class="o">,</span> <span class="n">SqlSource</span> <span class="n">processor</span><span class="o">,</span>
</span><span class='line'>                        <span class="n">String</span> <span class="n">parameterMapName</span><span class="o">,</span> <span class="n">Class</span> <span class="n">parameterClass</span><span class="o">,</span> <span class="n">String</span> <span class="n">resultMapName</span><span class="o">,</span>
</span><span class='line'>                        <span class="n">String</span><span class="o">[]</span> <span class="n">additionalResultMapNames</span><span class="o">,</span> <span class="n">Class</span> <span class="n">resultClass</span><span class="o">,</span> <span class="n">Class</span><span class="o">[]</span> <span class="n">additionalResultClasses</span><span class="o">,</span>
</span><span class='line'>                        <span class="n">String</span> <span class="n">cacheModelName</span><span class="o">,</span> <span class="n">String</span> <span class="n">resultSetType</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">fetchSize</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">allowRemapping</span><span class="o">,</span>
</span><span class='line'>                        <span class="n">Integer</span> <span class="n">timeout</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">defaultStatementTimeout</span><span class="o">,</span> <span class="n">String</span> <span class="n">xmlResultName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">errorContext</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="na">getErrorContext</span><span class="o">();</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">client</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="na">getClient</span><span class="o">();</span>
</span><span class='line'>    <span class="n">SqlMapExecutorDelegate</span> <span class="n">delegate</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">getDelegate</span><span class="o">();</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">typeHandlerFactory</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="na">getTypeHandlerFactory</span><span class="o">();</span>
</span><span class='line'>    <span class="n">errorContext</span><span class="o">.</span><span class="na">setActivity</span><span class="o">(</span><span class="err">“</span><span class="n">parsing</span> <span class="n">a</span> <span class="n">mapped</span> <span class="n">statement</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>    <span class="n">errorContext</span><span class="o">.</span><span class="na">setObjectId</span><span class="o">(</span><span class="n">id</span> <span class="o">+</span> <span class="err">“</span> <span class="n">statement</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>    <span class="n">errorContext</span><span class="o">.</span><span class="na">setMoreInfo</span><span class="o">(</span><span class="err">“</span><span class="n">Check</span> <span class="n">the</span> <span class="n">result</span> <span class="n">map</span> <span class="n">name</span><span class="o">.</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">resultMapName</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">statement</span><span class="o">.</span><span class="na">setResultMap</span><span class="o">(</span><span class="n">client</span><span class="o">.</span><span class="na">getDelegate</span><span class="o">().</span><span class="na">getResultMap</span><span class="o">(</span><span class="n">resultMapName</span><span class="o">));</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">additionalResultMapNames</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">additionalResultMapNames</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">statement</span><span class="o">.</span><span class="na">addResultMap</span><span class="o">(</span><span class="n">client</span><span class="o">.</span><span class="na">getDelegate</span><span class="o">().</span><span class="na">getResultMap</span><span class="o">(</span><span class="n">additionalResultMapNames</span><span class="o">[</span><span class="n">i</span><span class="o">]));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">errorContext</span><span class="o">.</span><span class="na">setMoreInfo</span><span class="o">(</span><span class="err">“</span><span class="n">Check</span> <span class="n">the</span> <span class="n">parameter</span> <span class="n">map</span> <span class="n">name</span><span class="o">.</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">parameterMapName</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">statement</span><span class="o">.</span><span class="na">setParameterMap</span><span class="o">(</span><span class="n">client</span><span class="o">.</span><span class="na">getDelegate</span><span class="o">().</span><span class="na">getParameterMap</span><span class="o">(</span><span class="n">parameterMapName</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">statement</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span><span class='line'>    <span class="n">statement</span><span class="o">.</span><span class="na">setResource</span><span class="o">(</span><span class="n">errorContext</span><span class="o">.</span><span class="na">getResource</span><span class="o">());</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">resultSetType</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="err">“</span><span class="n">FORWARD_ONLY</span><span class="err">”</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">resultSetType</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">statement</span><span class="o">.</span><span class="na">setResultSetType</span><span class="o">(</span><span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="n">ResultSet</span><span class="o">.</span><span class="na">TYPE_FORWARD_ONLY</span><span class="o">));</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="err">“</span><span class="n">SCROLL_INSENSITIVE</span><span class="err">”</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">resultSetType</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">statement</span><span class="o">.</span><span class="na">setResultSetType</span><span class="o">(</span><span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="n">ResultSet</span><span class="o">.</span><span class="na">TYPE_SCROLL_INSENSITIVE</span><span class="o">));</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="err">“</span><span class="n">SCROLL_SENSITIVE</span><span class="err">”</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">resultSetType</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">statement</span><span class="o">.</span><span class="na">setResultSetType</span><span class="o">(</span><span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="n">ResultSet</span><span class="o">.</span><span class="na">TYPE_SCROLL_SENSITIVE</span><span class="o">));</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">fetchSize</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">statement</span><span class="o">.</span><span class="na">setFetchSize</span><span class="o">(</span><span class="n">fetchSize</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// set parameter class either from attribute or from map (make sure to match)</span>
</span><span class='line'><span class="n">ParameterMap</span> <span class="n">parameterMap</span> <span class="o">=</span> <span class="n">statement</span><span class="o">.</span><span class="na">getParameterMap</span><span class="o">();</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">parameterMap</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">statement</span><span class="o">.</span><span class="na">setParameterClass</span><span class="o">(</span><span class="n">parameterClass</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">statement</span><span class="o">.</span><span class="na">setParameterClass</span><span class="o">(</span><span class="n">parameterMap</span><span class="o">.</span><span class="na">getParameterClass</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// process SQL statement, including inline parameter maps</span>
</span><span class='line'><span class="n">errorContext</span><span class="o">.</span><span class="na">setMoreInfo</span><span class="o">(</span><span class="s">&quot;Check the SQL statement.&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">Sql</span> <span class="n">sql</span> <span class="o">=</span> <span class="n">processor</span><span class="o">.</span><span class="na">getSql</span><span class="o">();</span>
</span><span class='line'><span class="n">setSqlForStatement</span><span class="o">(</span><span class="n">statement</span><span class="o">,</span> <span class="n">sql</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// set up either null result map or automatic result mapping</span>
</span><span class='line'><span class="n">ResultMap</span> <span class="n">resultMap</span> <span class="o">=</span> <span class="o">(</span><span class="n">ResultMap</span><span class="o">)</span> <span class="n">statement</span><span class="o">.</span><span class="na">getResultMap</span><span class="o">();</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">resultMap</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="n">resultClass</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">statement</span><span class="o">.</span><span class="na">setResultMap</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">resultMap</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">resultMap</span> <span class="o">=</span> <span class="n">buildAutoResultMap</span><span class="o">(</span><span class="n">allowRemapping</span><span class="o">,</span> <span class="n">statement</span><span class="o">,</span> <span class="n">resultClass</span><span class="o">,</span> <span class="n">xmlResultName</span><span class="o">);</span>
</span><span class='line'>  <span class="n">statement</span><span class="o">.</span><span class="na">setResultMap</span><span class="o">(</span><span class="n">resultMap</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">additionalResultClasses</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">additionalResultClasses</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">statement</span><span class="o">.</span><span class="na">addResultMap</span><span class="o">(</span><span class="n">buildAutoResultMap</span><span class="o">(</span><span class="n">allowRemapping</span><span class="o">,</span> <span class="n">statement</span><span class="o">,</span> <span class="n">additionalResultClasses</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">xmlResultName</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>在MappedStatementConfig类的构造方法里又调用了SqlSource接口的getSql方法，而SqlSource接口只有一个实现类XMLSqlSource，继续看XMLSqlSource类里的getSql方法是怎么实现的。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>XMLSqlSource.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">Sql</span> <span class="nf">getSql</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">state</span><span class="o">.</span><span class="na">getConfig</span><span class="o">().</span><span class="na">getErrorContext</span><span class="o">().</span><span class="na">setActivity</span><span class="o">(</span><span class="err">“</span><span class="n">processing</span> <span class="n">an</span> <span class="n">SQL</span> <span class="n">statement</span><span class="err">”</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">boolean</span> <span class="n">isDynamic</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'><span class="n">StringBuffer</span> <span class="n">sqlBuffer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">();</span>
</span><span class='line'><span class="n">DynamicSql</span> <span class="n">dynamic</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DynamicSql</span><span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="na">getConfig</span><span class="o">().</span><span class="na">getClient</span><span class="o">().</span><span class="na">getDelegate</span><span class="o">());</span>
</span><span class='line'><span class="n">isDynamic</span> <span class="o">=</span> <span class="n">parseDynamicTags</span><span class="o">(</span><span class="n">parentNode</span><span class="o">,</span> <span class="n">dynamic</span><span class="o">,</span> <span class="n">sqlBuffer</span><span class="o">,</span> <span class="n">isDynamic</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="n">String</span> <span class="n">sqlStatement</span> <span class="o">=</span> <span class="n">sqlBuffer</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">isDynamic</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">dynamic</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nf">RawSql</span><span class="o">(</span><span class="n">sqlStatement</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>接下来我们就来看一下iBatis是怎么处理SQL映射的:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>DynamicSql.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">processBodyChildren</span><span class="o">(</span><span class="n">StatementScope</span> <span class="n">statementScope</span><span class="o">,</span> <span class="n">SqlTagContext</span> <span class="n">ctx</span><span class="o">,</span> <span class="n">Object</span>     <span class="n">parameterObject</span><span class="o">,</span> <span class="n">Iterator</span> <span class="n">localChildren</span><span class="o">,</span> <span class="n">PrintWriter</span> <span class="n">out</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">localChildren</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">SqlChild</span> <span class="n">child</span> <span class="o">=</span> <span class="o">(</span><span class="n">SqlChild</span><span class="o">)</span> <span class="n">localChildren</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">child</span> <span class="k">instanceof</span> <span class="n">SqlText</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">SqlText</span> <span class="n">sqlText</span> <span class="o">=</span> <span class="o">(</span><span class="n">SqlText</span><span class="o">)</span> <span class="n">child</span><span class="o">;</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">sqlStatement</span> <span class="o">=</span> <span class="n">sqlText</span><span class="o">.</span><span class="na">getText</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">sqlText</span><span class="o">.</span><span class="na">isWhiteSpace</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">sqlStatement</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(!</span><span class="n">sqlText</span><span class="o">.</span><span class="na">isPostParseRequired</span><span class="o">())</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>      <span class="c1">// BODY OUT</span>
</span><span class='line'>      <span class="n">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">sqlStatement</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">ParameterMapping</span><span class="o">[]</span> <span class="n">mappings</span> <span class="o">=</span> <span class="n">sqlText</span><span class="o">.</span><span class="na">getParameterMappings</span><span class="o">();</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">mappings</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">n</span> <span class="o">=</span> <span class="n">mappings</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">ctx</span><span class="o">.</span><span class="na">addParameterMapping</span><span class="o">(</span><span class="n">mappings</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">IterateContext</span> <span class="n">itCtx</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">peekIterateContext</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="kc">null</span> <span class="o">!=</span> <span class="n">itCtx</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="n">itCtx</span><span class="o">.</span><span class="na">isAllowNext</span><span class="o">()){</span>
</span><span class='line'>        <span class="n">itCtx</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>        <span class="n">itCtx</span><span class="o">.</span><span class="na">setAllowNext</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(!</span><span class="n">itCtx</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">itCtx</span><span class="o">.</span><span class="na">setFinal</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">itCtx</span><span class="o">!=</span><span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">StringBuffer</span> <span class="n">sqlStatementBuffer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">(</span><span class="n">sqlStatement</span><span class="o">);</span>
</span><span class='line'>        <span class="n">iteratePropertyReplace</span><span class="o">(</span><span class="n">sqlStatementBuffer</span><span class="o">,</span> <span class="n">itCtx</span><span class="o">);</span>
</span><span class='line'>        <span class="n">sqlStatement</span> <span class="o">=</span> <span class="n">sqlStatementBuffer</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">sqlText</span> <span class="o">=</span> <span class="n">PARAM_PARSER</span><span class="o">.</span><span class="na">parseInlineParameterMap</span><span class="o">(</span><span class="n">delegate</span><span class="o">.</span><span class="na">getTypeHandlerFactory</span><span class="o">(),</span> <span class="n">sqlStatement</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">ParameterMapping</span><span class="o">[]</span> <span class="n">mappings</span> <span class="o">=</span> <span class="n">sqlText</span><span class="o">.</span><span class="na">getParameterMappings</span><span class="o">();</span>
</span><span class='line'>      <span class="n">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">sqlText</span><span class="o">.</span><span class="na">getText</span><span class="o">());</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">mappings</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">n</span> <span class="o">=</span> <span class="n">mappings</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">ctx</span><span class="o">.</span><span class="na">addParameterMapping</span><span class="o">(</span><span class="n">mappings</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span><span class='line'>         <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">child</span> <span class="k">instanceof</span> <span class="n">SqlTag</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>注意到在processBodyChildren方法里调用了InlineParameterMapParser类的parseInlineParameterMap方法，继续跟踪下去。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>InlineParameterMapParser.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">SqlText</span> <span class="nf">parseInlineParameterMap</span><span class="o">(</span><span class="n">TypeHandlerFactory</span> <span class="n">typeHandlerFactory</span><span class="o">,</span> <span class="n">String</span> <span class="n">sqlStatement</span><span class="o">,</span> <span class="n">Class</span> <span class="n">parameterClass</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">String</span> <span class="n">newSql</span> <span class="o">=</span> <span class="n">sqlStatement</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">List</span> <span class="n">mappingList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">StringTokenizer</span> <span class="n">parser</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringTokenizer</span><span class="o">(</span><span class="n">sqlStatement</span><span class="o">,</span> <span class="n">PARAMETER_TOKEN</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'><span class="n">StringBuffer</span> <span class="n">newSqlBuffer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">String</span> <span class="n">token</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="n">String</span> <span class="n">lastToken</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="k">while</span> <span class="o">(</span><span class="n">parser</span><span class="o">.</span><span class="na">hasMoreTokens</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">token</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="na">nextToken</span><span class="o">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">PARAMETER_TOKEN</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">lastToken</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">PARAMETER_TOKEN</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">token</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">newSqlBuffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">PARAMETER_TOKEN</span><span class="o">);</span>
</span><span class='line'>      <span class="n">token</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">ParameterMapping</span> <span class="n">mapping</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">token</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="n">PARAM_DELIM</span><span class="o">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mapping</span> <span class="o">=</span> <span class="n">oldParseMapping</span><span class="o">(</span><span class="n">token</span><span class="o">,</span> <span class="n">parameterClass</span><span class="o">,</span> <span class="n">typeHandlerFactory</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mapping</span> <span class="o">=</span> <span class="n">newParseMapping</span><span class="o">(</span><span class="n">token</span><span class="o">,</span> <span class="n">parameterClass</span><span class="o">,</span> <span class="n">typeHandlerFactory</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">mappingList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">mapping</span><span class="o">);</span>
</span><span class='line'>      <span class="n">newSqlBuffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;?&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">token</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="na">nextToken</span><span class="o">();</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(!</span><span class="n">PARAMETER_TOKEN</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">token</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">SqlMapException</span><span class="o">(</span><span class="s">&quot;Unterminated inline parameter in mapped statement (&quot;</span> <span class="o">+</span> <span class="s">&quot;statement.getId()&quot;</span> <span class="o">+</span> <span class="s">&quot;).&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">token</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">PARAMETER_TOKEN</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">token</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">newSqlBuffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">token</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">lastToken</span> <span class="o">=</span> <span class="n">token</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">newSql</span> <span class="o">=</span> <span class="n">newSqlBuffer</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">ParameterMapping</span><span class="o">[]</span> <span class="n">mappingArray</span> <span class="o">=</span> <span class="o">(</span><span class="n">ParameterMapping</span><span class="o">[])</span> <span class="n">mappingList</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="n">ParameterMapping</span><span class="o">[</span><span class="n">mappingList</span><span class="o">.</span><span class="na">size</span><span class="o">()]);</span>
</span><span class='line'>
</span><span class='line'><span class="n">SqlText</span> <span class="n">sqlText</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SqlText</span><span class="o">();</span>
</span><span class='line'><span class="n">sqlText</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">newSql</span><span class="o">);</span>
</span><span class='line'><span class="n">sqlText</span><span class="o">.</span><span class="na">setParameterMappings</span><span class="o">(</span><span class="n">mappingArray</span><span class="o">);</span>
</span><span class='line'><span class="k">return</span> <span class="n">sqlText</span><span class="o">;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>终于找到解析SQL的类了，在parseInlineParameterMap方法中会将下面的SQL</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="k">TABLE</span> <span class="k">WHERE</span> <span class="n">ID</span> <span class="o">=</span> <span class="o">#</span><span class="n">ID</span><span class="o">#</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>解析成能被JDBC执行的SQL</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="k">TABLE</span> <span class="k">WHERE</span> <span class="n">ID</span> <span class="o">=</span> <span class="o">?</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>等到解析完成后会把SQL保存到SqlText类中，再把SqlText保存到MappedStatement类里，有了MappedStatement对象就可以执行相应的CRUD操作了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iBatis和myBatis源码分析之缓存]]></title>
    <link href="http://liuxuan.info/blog/2011/09/16/ibatis-and-mybatis-source-code-analysis-cache/"/>
    <updated>2011-09-16T18:41:00+08:00</updated>
    <id>http://liuxuan.info/blog/2011/09/16/ibatis-and-mybatis-source-code-analysis-cache</id>
    <content type="html"><![CDATA[<p><strong>一.iBatis</strong></p>

<p>1.iBatis的cache包结构：</p>

<table border="1" width="100%" cellpadding="3" cellspacing="0" summary="">
<tbody>
<tr>
<th align="left" colspan="2" style="background-color:#CCCCFF">
<b>Packages</b>
</th>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.cache</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.cache.fifo</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.cache.lru</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.cache.memory</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.cache.oscache</b></td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>

<p>iBatis已实现的四个CacheController类分别是：</p>

<ul>
  <li>FifoCacheController</li>
  <li>LruCacheController</li>
  <li>MemoryCacheController</li>
  <li>OSCacheController</li>
</ul>

<p>其中，前三种是最常用的缓存策略，第四种是对<a href="http://java.net/projects/oscache" title="OSCache">OSCache</a>的支持。当然，你也可以根据需要实现自己的缓存策略，只需要实现CacheController接口就可以了。 <!--more--></p>

<p>2.源码分析</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>FifoCacheController.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * FIFO (first in, first out) cache controller implementation</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FifoCacheController</span> <span class="kd">implements</span> <span class="n">CacheController</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kt">int</span> <span class="n">cacheSize</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Map</span> <span class="n">cache</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">List</span> <span class="n">keyList</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Default constructor</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">FifoCacheController</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">cacheSize</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">cache</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">synchronizedMap</span><span class="o">(</span><span class="k">new</span> <span class="n">HashMap</span><span class="o">());</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">keyList</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">synchronizedList</span><span class="o">(</span><span class="k">new</span> <span class="n">LinkedList</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">int</span> <span class="n">getCacheSize</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">cacheSize</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">setCacheSize</span><span class="o">(</span><span class="kt">int</span> <span class="n">cacheSize</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">cacheSize</span> <span class="o">=</span> <span class="n">cacheSize</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Configures the cache</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * @param props Optionally can contain properties [reference-type=WEAK|SOFT|STRONG]</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setProperties</span><span class="o">(</span><span class="n">Properties</span> <span class="n">props</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">size</span> <span class="o">=</span> <span class="n">props</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="err">“</span><span class="n">cache</span><span class="o">-</span><span class="n">size</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">size</span> <span class="o">=</span> <span class="n">props</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="err">“</span><span class="n">size</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">cacheSize</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">size</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Add an object to the cache</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * @param cacheModel The cacheModel</span>
</span><span class='line'><span class="cm">   * @param key        The key of the object to be cached</span>
</span><span class='line'><span class="cm">   * @param value      The object to be cached</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">putObject</span><span class="o">(</span><span class="n">CacheModel</span> <span class="n">cacheModel</span><span class="o">,</span> <span class="n">Object</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">cache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>    <span class="n">keyList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">keyList</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">cacheSize</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Object</span> <span class="n">oldestKey</span> <span class="o">=</span> <span class="n">keyList</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="n">cache</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">oldestKey</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IndexOutOfBoundsException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//ignore</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Get an object out of the cache.</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * @param cacheModel The cache model</span>
</span><span class='line'><span class="cm">   * @param key        The key of the object to be returned</span>
</span><span class='line'><span class="cm">   * @return The cached object (or null)</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Object</span> <span class="nf">getObject</span><span class="o">(</span><span class="n">CacheModel</span> <span class="n">cacheModel</span><span class="o">,</span> <span class="n">Object</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">cache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="n">Object</span> <span class="n">removeObject</span><span class="o">(</span><span class="n">CacheModel</span> <span class="n">cacheModel</span><span class="o">,</span> <span class="n">Object</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">keyList</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">cache</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Flushes the cache.</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * @param cacheModel The cache model</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">flush</span><span class="o">(</span><span class="n">CacheModel</span> <span class="n">cacheModel</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">cache</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>    <span class="n">keyList</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>我们可以看到FifoCacheController是用一个同步的HashMap和一个同步的LinkedList来实现的。其中，HashMap用来保存缓存内容；LinkedList是用来保存缓存中的对象的key。本来缓存只需要一个key-value容器就可以实现了，为什么要多引入一个LinkedList呢？主要原因还是Map的API不够强大，不支持索引操作，为了方便地找到HashMap中的第一个元素就必须加入一个支持索引的操作的集合，比如FifoCacheController类里的LinkedList,这样就可以快速地找到HashMap中的第一个对象的key值，而不是迭代HashMap。</p>

<p>但是，这样的实现存在一个bug。假设有下列代码：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">putObject</span><span class="o">(</span><span class="n">cacheModel1</span><span class="o">,</span> <span class="err">“</span><span class="n">key1</span><span class="err">”</span><span class="o">,</span> <span class="err">“</span><span class="n">value1</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'><span class="n">putObject</span><span class="o">(</span><span class="n">cacheModel2</span><span class="o">,</span> <span class="err">“</span><span class="n">key2</span><span class="err">”</span><span class="o">,</span> <span class="err">“</span><span class="n">value2</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'><span class="n">putObject</span><span class="o">(</span><span class="n">cacheModel3</span><span class="o">,</span> <span class="err">“</span><span class="n">key1</span><span class="err">”</span><span class="o">,</span> <span class="err">“</span><span class="n">value3</span><span class="err">”</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>显然，这个时候HashMap中应该有两个值，”key1”-&gt;”value3”和”key2”-&gt;”value2”；但是HashMap中却有三个key值，这样HashMap和LinkedList无法对应起来，也就是bug产生的原因。这个bug只存在与iBatis中，myBatis已经重写了缓存的实现，所以myBatis没有这个bug。</p>

<p>在putObject方法里，又出现了在catch体里不做任何处理的“坏味道”。而且我们知道在这里捕获的IndexOutOfBoundsException不是已检查异常，完全可以不加try-catch；如果要加上try-catch的话，那么在catch体里可以加上日志，这样对缓存调优是非常有帮助的；又或者可以把异常抛出，在CacheModel类里处理异常。总之，异常处理是一定要做的，绝对不能什么都不做。</p>

<p>从实际情况来看，FIFO策略的缓存实现很少使用，用到最多的还是LRU策略的缓存实现。我们来看一下iBatis的LRU缓存实现：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>LruCacheController.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * LRU (least recently used) cache controller implementation</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LruCacheController</span> <span class="kd">implements</span> <span class="n">CacheController</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kt">int</span> <span class="n">cacheSize</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Map</span> <span class="n">cache</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">List</span> <span class="n">keyList</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Default constructor</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">LruCacheController</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">cacheSize</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">cache</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">synchronizedMap</span><span class="o">(</span><span class="k">new</span> <span class="n">HashMap</span><span class="o">());</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">keyList</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">synchronizedList</span><span class="o">(</span><span class="k">new</span> <span class="n">LinkedList</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">int</span> <span class="n">getCacheSize</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">cacheSize</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">setCacheSize</span><span class="o">(</span><span class="kt">int</span> <span class="n">cacheSize</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">cacheSize</span> <span class="o">=</span> <span class="n">cacheSize</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Configures the cache</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * @param props Optionally can contain properties [reference-type=WEAK|SOFT|STRONG]</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setProperties</span><span class="o">(</span><span class="n">Properties</span> <span class="n">props</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">size</span> <span class="o">=</span> <span class="n">props</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="err">“</span><span class="n">cache</span><span class="o">-</span><span class="n">size</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">size</span> <span class="o">=</span> <span class="n">props</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="err">“</span><span class="n">size</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">cacheSize</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">size</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Add an object to the cache</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * @param cacheModel The cacheModel</span>
</span><span class='line'><span class="cm">   * @param key        The key of the object to be cached</span>
</span><span class='line'><span class="cm">   * @param value      The object to be cached</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">putObject</span><span class="o">(</span><span class="n">CacheModel</span> <span class="n">cacheModel</span><span class="o">,</span> <span class="n">Object</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">cache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>    <span class="n">keyList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">keyList</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">cacheSize</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Object</span> <span class="n">oldestKey</span> <span class="o">=</span> <span class="n">keyList</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="n">cache</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">oldestKey</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IndexOutOfBoundsException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//ignore</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Get an object out of the cache.</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * @param cacheModel The cache model</span>
</span><span class='line'><span class="cm">   * @param key        The key of the object to be returned</span>
</span><span class='line'><span class="cm">   * @return The cached object (or null)</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Object</span> <span class="nf">getObject</span><span class="o">(</span><span class="n">CacheModel</span> <span class="n">cacheModel</span><span class="o">,</span> <span class="n">Object</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Object</span> <span class="n">result</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="n">keyList</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">keyList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="n">Object</span> <span class="n">removeObject</span><span class="o">(</span><span class="n">CacheModel</span> <span class="n">cacheModel</span><span class="o">,</span> <span class="n">Object</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">keyList</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">cache</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Flushes the cache.</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * @param cacheModel The cache model</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">flush</span><span class="o">(</span><span class="n">CacheModel</span> <span class="n">cacheModel</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">cache</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>    <span class="n">keyList</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>LruCacheController怎么跟FIFOCacheController长得差不多啊，FIFO跟LRU的区别在哪里体现呢？LRU就是当缓存空间不足时，把最近最少使用的对象移除，那怎么说明一个对象是最近最少使用呢？再仔细一看，答案就在getObject方法里。当要在缓存中取对象时，先删除keyList中对应的key值，然后再加入到keyList的末尾，这样keyList中按顺序越是靠前的对象越是最近最少使用的对象。LruCacheController要依靠keyList实现LRU，所以FIFO里的两个集合不同步的bug在LRU里依然存在。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>MemoryCacheController.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Memory-based implementation of CacheController</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemoryCacheController</span> <span class="kd">implements</span> <span class="n">CacheController</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">private</span> <span class="n">MemoryCacheLevel</span> <span class="n">referenceType</span> <span class="o">=</span> <span class="n">MemoryCacheLevel</span><span class="o">.</span><span class="na">WEAK</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Map</span> <span class="n">cache</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">synchronizedMap</span><span class="o">(</span><span class="k">new</span> <span class="n">HashMap</span><span class="o">());&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Configures the cache</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * @param props Optionally can contain properties [reference-type=WEAK|SOFT|STRONG]</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setProperties</span><span class="o">(</span><span class="n">Properties</span> <span class="n">props</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">refType</span> <span class="o">=</span> <span class="n">props</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="err">“</span><span class="n">reference</span><span class="o">-</span><span class="n">type</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">refType</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">refType</span> <span class="o">=</span> <span class="n">props</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="err">“</span><span class="n">referenceType</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">refType</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">referenceType</span> <span class="o">=</span> <span class="n">MemoryCacheLevel</span><span class="o">.</span><span class="na">getByReferenceType</span><span class="o">(</span><span class="n">refType</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="n">MemoryCacheLevel</span> <span class="n">getReferenceType</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">referenceType</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">setReferenceType</span><span class="o">(</span><span class="n">MemoryCacheLevel</span> <span class="n">referenceType</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">referenceType</span> <span class="o">=</span> <span class="n">referenceType</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Add an object to the cache</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * @param cacheModel The cacheModel</span>
</span><span class='line'><span class="cm">   * @param key        The key of the object to be cached</span>
</span><span class='line'><span class="cm">   * @param value      The object to be cached</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">putObject</span><span class="o">(</span><span class="n">CacheModel</span> <span class="n">cacheModel</span><span class="o">,</span> <span class="n">Object</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Object</span> <span class="n">reference</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">referenceType</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">MemoryCacheLevel</span><span class="o">.</span><span class="na">WEAK</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">reference</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WeakReference</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">referenceType</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">MemoryCacheLevel</span><span class="o">.</span><span class="na">SOFT</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">reference</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SoftReference</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">referenceType</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">MemoryCacheLevel</span><span class="o">.</span><span class="na">STRONG</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">reference</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StrongReference</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">cache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">reference</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Get an object out of the cache.</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * @param cacheModel The cache model</span>
</span><span class='line'><span class="cm">   * @param key        The key of the object to be returned</span>
</span><span class='line'><span class="cm">   * @return The cached object (or null)</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Object</span> <span class="nf">getObject</span><span class="o">(</span><span class="n">CacheModel</span> <span class="n">cacheModel</span><span class="o">,</span> <span class="n">Object</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Object</span> <span class="n">value</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Object</span> <span class="n">ref</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">ref</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">ref</span> <span class="k">instanceof</span> <span class="n">StrongReference</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="o">((</span><span class="n">StrongReference</span><span class="o">)</span> <span class="n">ref</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ref</span> <span class="k">instanceof</span> <span class="n">SoftReference</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="o">((</span><span class="n">SoftReference</span><span class="o">)</span> <span class="n">ref</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ref</span> <span class="k">instanceof</span> <span class="n">WeakReference</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="o">((</span><span class="n">WeakReference</span><span class="o">)</span> <span class="n">ref</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="n">Object</span> <span class="n">removeObject</span><span class="o">(</span><span class="n">CacheModel</span> <span class="n">cacheModel</span><span class="o">,</span> <span class="n">Object</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Object</span> <span class="n">value</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Object</span> <span class="n">ref</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">ref</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">ref</span> <span class="k">instanceof</span> <span class="n">StrongReference</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="o">((</span><span class="n">StrongReference</span><span class="o">)</span> <span class="n">ref</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ref</span> <span class="k">instanceof</span> <span class="n">SoftReference</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="o">((</span><span class="n">SoftReference</span><span class="o">)</span> <span class="n">ref</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ref</span> <span class="k">instanceof</span> <span class="n">WeakReference</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="o">((</span><span class="n">WeakReference</span><span class="o">)</span> <span class="n">ref</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Flushes the cache.</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * @param cacheModel The cache model</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">flush</span><span class="o">(</span><span class="n">CacheModel</span> <span class="n">cacheModel</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">cache</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Class to implement a strong (permanent) reference.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">StrongReference</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Object</span> <span class="n">object</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * StrongReference constructor for an object</span>
</span><span class='line'><span class="cm"> * @param object - the Object to store</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">StrongReference</span><span class="o">(</span><span class="n">Object</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">object</span> <span class="o">=</span> <span class="n">object</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Getter to get the object stored in the StrongReference</span>
</span><span class='line'><span class="cm"> * @return - the stored Object</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Object</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">object</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>   <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>基于内存的MemoryCacheController用到了MemoryCacheLevel这个类。在MemoryCacheLevel中定义了三种对象的引用类型：strong，soft和weak。关于Java的引用类型，可以参考我在我以前写的一篇博文<a href="http://liuxuan.info/2011/03/java-four-types-of-reference/" title="Java的四种引用类型">Java的四种引用类型</a>。总的来说，MemoryCacheController的实现还是比较简单的，但要注意到MemoryCacheController里没有keyList，所以不存在FIFO和LRU中都有的那个两个集合不同步的bug。</p>

<p>了解了缓存的实现之后，我们还要要搞清楚iBatis是什么时候把对象放到缓存中去的。其实根据常识，对象肯定是在第一次被从数据库中读取出来的时候存放到缓存中去的，接下去就来验证我们的猜想。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>CachingStatement.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">public</span> <span class="n">CacheKey</span> <span class="nf">getCacheKey</span><span class="o">(</span><span class="n">StatementScope</span> <span class="n">statementScope</span><span class="o">,</span> <span class="n">Object</span> <span class="n">parameterObject</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">CacheKey</span> <span class="n">key</span> <span class="o">=</span> <span class="n">statement</span><span class="o">.</span><span class="na">getCacheKey</span><span class="o">(</span><span class="n">statementScope</span><span class="o">,</span> <span class="n">parameterObject</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">cacheModel</span><span class="o">.</span><span class="na">isReadOnly</span><span class="o">()</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="o">!</span><span class="n">cacheModel</span><span class="o">.</span><span class="na">isSerialize</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">key</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">statementScope</span><span class="o">.</span><span class="na">getSession</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">key</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="n">Object</span> <span class="n">executeQueryForObject</span><span class="o">(</span><span class="n">StatementScope</span> <span class="n">statementScope</span><span class="o">,</span> <span class="n">Transaction</span> <span class="n">trans</span><span class="o">,</span>
</span><span class='line'>  	<span class="n">Object</span> <span class="n">parameterObject</span><span class="o">,</span> <span class="n">Object</span> <span class="n">resultObject</span><span class="o">)</span><span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">CacheKey</span> <span class="n">cacheKey</span> <span class="o">=</span> <span class="n">getCacheKey</span><span class="o">(</span><span class="n">statementScope</span><span class="o">,</span> <span class="n">parameterObject</span><span class="o">);</span>
</span><span class='line'><span class="n">cacheKey</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">&quot;executeQueryForObject&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">Object</span> <span class="n">object</span> <span class="o">=</span> <span class="n">cacheModel</span><span class="o">.</span><span class="na">getObject</span><span class="o">(</span><span class="n">cacheKey</span><span class="o">);</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">object</span> <span class="o">==</span> <span class="n">CacheModel</span><span class="o">.</span><span class="na">NULL_OBJECT</span><span class="o">){</span>
</span><span class='line'>	<span class="c1">//	This was cached, but null</span>
</span><span class='line'>	<span class="n">object</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span><span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">object</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">object</span> <span class="o">=</span> <span class="n">statement</span><span class="o">.</span><span class="na">executeQueryForObject</span><span class="o">(</span><span class="n">statementScope</span><span class="o">,</span> <span class="n">trans</span><span class="o">,</span> <span class="n">parameterObject</span><span class="o">,</span> <span class="n">resultObject</span><span class="o">);</span>
</span><span class='line'>   <span class="n">cacheModel</span><span class="o">.</span><span class="na">putObject</span><span class="o">(</span><span class="n">cacheKey</span><span class="o">,</span> <span class="n">object</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">object</span><span class="o">;</span>   <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="n">List</span> <span class="n">executeQueryForList</span><span class="o">(</span><span class="n">StatementScope</span> <span class="n">statementScope</span><span class="o">,</span> <span class="n">Transaction</span> <span class="n">trans</span><span class="o">,</span> <span class="n">Object</span> <span class="n">parameterObject</span><span class="o">,</span>
</span><span class='line'>  	<span class="kt">int</span> <span class="n">skipResults</span><span class="o">,</span> <span class="kt">int</span> <span class="n">maxResults</span><span class="o">)</span><span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">CacheKey</span> <span class="n">cacheKey</span> <span class="o">=</span> <span class="n">getCacheKey</span><span class="o">(</span><span class="n">statementScope</span><span class="o">,</span> <span class="n">parameterObject</span><span class="o">);</span>
</span><span class='line'><span class="n">cacheKey</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="s">&quot;executeQueryForList&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">cacheKey</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">skipResults</span><span class="o">);</span>
</span><span class='line'><span class="n">cacheKey</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">maxResults</span><span class="o">);</span>
</span><span class='line'><span class="n">Object</span> <span class="n">listAsObject</span> <span class="o">=</span> <span class="n">cacheModel</span><span class="o">.</span><span class="na">getObject</span><span class="o">(</span><span class="n">cacheKey</span><span class="o">);</span>
</span><span class='line'><span class="n">List</span> <span class="n">list</span><span class="o">;</span>
</span><span class='line'><span class="k">if</span><span class="o">(</span><span class="n">listAsObject</span> <span class="o">==</span> <span class="n">CacheModel</span><span class="o">.</span><span class="na">NULL_OBJECT</span><span class="o">){</span>
</span><span class='line'>  <span class="c1">// The cached object was null</span>
</span><span class='line'>  <span class="n">list</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span><span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">listAsObject</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">list</span> <span class="o">=</span> <span class="n">statement</span><span class="o">.</span><span class="na">executeQueryForList</span><span class="o">(</span><span class="n">statementScope</span><span class="o">,</span> <span class="n">trans</span><span class="o">,</span> <span class="n">parameterObject</span><span class="o">,</span> <span class="n">skipResults</span><span class="o">,</span> <span class="n">maxResults</span><span class="o">);</span>
</span><span class='line'>  <span class="n">cacheModel</span><span class="o">.</span><span class="na">putObject</span><span class="o">(</span><span class="n">cacheKey</span><span class="o">,</span> <span class="n">list</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span><span class="k">else</span><span class="o">{</span>
</span><span class='line'>  <span class="n">list</span> <span class="o">=</span> <span class="o">(</span><span class="n">List</span><span class="o">)</span> <span class="n">listAsObject</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">list</span><span class="o">;</span>   <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>我们可以看到，在executeQueryForObject和executeQueryForList方法中，首先根据对象的key值到缓存中获取对象，如果没有找到对应的对象就通过调用下面的方法来把对象存放到缓存中：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">cacheModel</span><span class="o">.</span><span class="na">putObject</span><span class="o">(</span><span class="n">cacheKey</span><span class="o">,</span> <span class="n">object</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这样我们之前的猜想就得到了验证。我们再来看看缓存中对象对应的key是什么东西，定位到CacheModel类的putObject方法：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">private</span> <span class="n">CacheController</span> <span class="n">controller</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Add an object to the cache</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * @param key   The key of the object to be cached</span>
</span><span class='line'><span class="cm">   * @param value The object to be cached</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">putObject</span><span class="o">(</span><span class="n">CacheKey</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  	<span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">==</span> <span class="n">value</span><span class="o">)</span> <span class="n">value</span> <span class="o">=</span> <span class="n">NULL_OBJECT</span><span class="o">;</span>
</span><span class='line'>  	<span class="kd">synchronized</span> <span class="o">(</span> <span class="k">this</span> <span class="o">)</span>  <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">serialize</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="o">!</span><span class="n">readOnly</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="n">value</span> <span class="o">!=</span> <span class="n">NULL_OBJECT</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">ByteArrayOutputStream</span> <span class="n">bos</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">();</span>
</span><span class='line'>          <span class="n">ObjectOutputStream</span> <span class="n">oos</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ObjectOutputStream</span><span class="o">(</span><span class="n">bos</span><span class="o">);</span>
</span><span class='line'>          <span class="n">oos</span><span class="o">.</span><span class="na">writeObject</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class='line'>          <span class="n">oos</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class='line'>          <span class="n">oos</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>          <span class="n">value</span> <span class="o">=</span> <span class="n">bos</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="err">“</span><span class="n">Error</span> <span class="n">caching</span> <span class="n">serializable</span> <span class="n">object</span><span class="o">.</span>  <span class="nl">Cause:</span> <span class="err">“</span> <span class="o">+</span> <span class="n">e</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">controller</span><span class="o">.</span><span class="na">putObject</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span> <span class="n">log</span><span class="o">.</span><span class="na">isDebugEnabled</span><span class="o">()</span> <span class="o">)</span>  <span class="o">{</span>
</span><span class='line'>        <span class="n">log</span><span class="o">(</span><span class="err">“</span><span class="n">stored</span> <span class="n">object</span><span class="err">”</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>CacheModel类里的putObject方法又调用了CacheController的putObject方法，注意传入的key值是CacheKey对象，也就是说最后作为缓存中对象的key是它的CacheKey对象。不得不说这是一个失败的设计，key值的类型是String类型就已经足够了，完全没有必要用对象类型来做key值的类型。因为内存空间是有限的，要在有限的空间中尽可能地存放更多的内容，就需要key值在保证唯一性的情况下空间占的越小越好。</p>

<p><strong>二.myBatis</strong></p>

<p>1.myBatis的cache包结构：</p>

<table border="1" width="100%" cellpadding="3" cellspacing="0" summary="">
<tbody>
<tr>
<th align="left" colspan="2" style="background-color:#CCCCFF">
<b>Packages</b>
</th>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.cache</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.cache.decorators</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.cache.impl</b></td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>

<p>相比iBatis来说，myBatis的包结构变得更简洁，从五个包简化成了三个包。而且从实现方式上也有了改变，从decorators这样的包名可以猜到在这个包下的类都是装饰类，而实际上也是如此的。myBatis的缓存实现采用了装饰模式，impl包下实现的是缓存的基本功能，不同的缓存策略由decorators包下的类实现。</p>

<p>相比iBatis，myBatis增加了多个缓存实现：</p>

<ul>
  <li>LoggingCache</li>
  <li>ScheduledCache</li>
  <li>SerializedCache</li>
  <li>SynchronizedCache</li>
  <li>TransactionalCache</li>
</ul>

<p>2.源码分析</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Cache.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Cache</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">String</span> <span class="n">getId</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">getSize</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">putObject</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Object</span> <span class="n">getObject</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Object</span> <span class="n">removeObject</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">clear</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">ReadWriteLock</span> <span class="n">getReadWriteLock</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>和iBatis不同，Cache接口中定义了concurrent包中的ReadWriteLock接口，而它只有一个实现类ReentrantReadWriteLock。对比iBatis使用同步的Map集合来解决解决并发读写时缓存数据的同步问题，myBatis则使用ReentrantReadWriteLock类的锁机制来防止在并发写过程中的线程安全问题。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>LruCache.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Lru (first in, first out) cache decorator</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LruCache</span> <span class="kd">implements</span> <span class="n">Cache</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">final</span> <span class="n">Cache</span> <span class="n">delegate</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">object</span> <span class="o">,</span> <span class="n">Object</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">keyMap</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Object</span> <span class="n">eldestKey</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="n">LruCache</span><span class="o">(</span><span class="n">Cache</span> <span class="n">delegate</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">this</span><span class="o">.</span><span class="na">delegate</span> <span class="o">=</span> <span class="n">delegate</span><span class="o">;</span>
</span><span class='line'><span class="n">setSize</span><span class="o">(</span><span class="mi">1024</span><span class="o">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="n">String</span> <span class="n">getId</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">delegate</span><span class="o">.</span><span class="na">getId</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">int</span> <span class="n">getSize</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">delegate</span><span class="o">.</span><span class="na">getSize</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">setSize</span><span class="o">(</span><span class="kd">final</span> <span class="kt">int</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">keyMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedHashMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">object</span> <span class="o">,</span> <span class="n">Object</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;(</span><span class="n">size</span><span class="o">,</span> <span class="o">.</span><span class="mi">75</span><span class="n">F</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="mi">4267176411845948333L</span><span class="o">;</span>
</span><span class='line'>      <span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">removeEldestEntry</span><span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">object</span> <span class="o">,</span> <span class="n">Object</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">eldest</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">tooBig</span> <span class="o">=</span> <span class="n">size</span><span class="o">()</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">tooBig</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">eldestKey</span> <span class="o">=</span> <span class="n">eldest</span><span class="o">.</span><span class="na">getKey</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">tooBig</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">putObject</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">delegate</span><span class="o">.</span><span class="na">putObject</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>    <span class="n">cycleKeyList</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="n">Object</span> <span class="n">getObject</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">keyMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span> <span class="c1">//touch</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">delegate</span><span class="o">.</span><span class="na">getObject</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="n">Object</span> <span class="n">removeObject</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">delegate</span><span class="o">.</span><span class="na">removeObject</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">clear</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">delegate</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>    <span class="n">keyMap</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="n">ReadWriteLock</span> <span class="n">getReadWriteLock</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">delegate</span><span class="o">.</span><span class="na">getReadWriteLock</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kt">void</span> <span class="n">cycleKeyList</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">keyMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">eldestKey</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">delegate</span><span class="o">.</span><span class="na">removeObject</span><span class="o">(</span><span class="n">eldestKey</span><span class="o">);</span>
</span><span class='line'>      <span class="n">eldestKey</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>LRU是最常使用的缓存算法，所以就以LruCache为例，其他缓存实现也是差不多的。在iBatis里，key值是用一个同步的LinkedList来维护的，而myBatis则是改用LinkedHashMap来维护。这样做的好处就是解决了在iBatis中的HashMap和LinkedList的不同步问题，而且也不需要自己实现LRU，LinkedHashMap原生就支持LRU。</p>

<p>缓存中的对象是存放在impl包下的PerpetualCache类的HashMap里的，所以各个缓存算法实现类里都需要持有一个PerpetualCache实例。当要从缓存中读取数据时，就委托给PerpetualCache类去执行读取方法，而这对于调用者来说是透明的。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>DefaultSqlSession.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">private</span> <span class="n">Configuration</span> <span class="n">configuration</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Executor</span> <span class="n">executor</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kt">boolean</span> <span class="n">autoCommit</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">dirty</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="n">DefaultSqlSession</span><span class="o">(</span><span class="n">Configuration</span> <span class="n">configuration</span><span class="o">,</span> <span class="n">Executor</span> <span class="n">executor</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">autoCommit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">configuration</span> <span class="o">=</span> <span class="n">configuration</span><span class="o">;</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">executor</span> <span class="o">=</span> <span class="n">executor</span><span class="o">;</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">autoCommit</span> <span class="o">=</span> <span class="n">autoCommit</span><span class="o">;</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">dirty</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="n">List</span> <span class="n">selectList</span><span class="o">(</span><span class="n">String</span> <span class="n">statement</span><span class="o">,</span> <span class="n">Object</span> <span class="n">parameter</span><span class="o">,</span> <span class="n">RowBounds</span> <span class="n">rowBounds</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">MappedStatement</span> <span class="n">ms</span> <span class="o">=</span> <span class="n">configuration</span><span class="o">.</span><span class="na">getMappedStatement</span><span class="o">(</span><span class="n">statement</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">executor</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="n">ms</span><span class="o">,</span> <span class="n">wrapCollection</span><span class="o">(</span><span class="n">parameter</span><span class="o">),</span> <span class="n">rowBounds</span><span class="o">,</span> <span class="n">Executor</span><span class="o">.</span><span class="na">NO_RESULT_HANDLER</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="n">ExceptionFactory</span><span class="o">.</span><span class="na">wrapException</span><span class="o">(</span><span class="err">“</span><span class="n">Error</span> <span class="n">querying</span> <span class="n">database</span><span class="o">.</span>  <span class="nl">Cause:</span> <span class="err">“</span> <span class="o">+</span> <span class="n">e</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">ErrorContext</span><span class="o">.</span><span class="na">instance</span><span class="o">().</span><span class="na">reset</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>DefaultSqlSession在创建完成后就有了对应的Executor实例，查询就调用Executor实例的query方法。那DefaultSqlSession是在哪里被创建的呢？</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>DefaultSqlSessionFactory.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Configuration</span> <span class="n">configuration</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">private</span> <span class="n">SqlSession</span> <span class="n">openSessionFromDataSource</span><span class="o">(</span><span class="n">ExecutorType</span> <span class="n">execType</span><span class="o">,</span> <span class="n">TransactionIsolationLevel</span> <span class="n">level</span><span class="o">,</span>   <span class="kt">boolean</span> <span class="n">autoCommit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">final</span> <span class="n">Environment</span> <span class="n">environment</span> <span class="o">=</span> <span class="n">configuration</span><span class="o">.</span><span class="na">getEnvironment</span><span class="o">();</span>
</span><span class='line'>      <span class="kd">final</span> <span class="n">DataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="n">getDataSourceFromEnvironment</span><span class="o">(</span><span class="n">environment</span><span class="o">);</span>
</span><span class='line'>      <span class="n">TransactionFactory</span> <span class="n">transactionFactory</span> <span class="o">=</span> <span class="n">getTransactionFactoryFromEnvironment</span><span class="o">(</span><span class="n">environment</span><span class="o">);</span>
</span><span class='line'>      <span class="n">connection</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">level</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">connection</span><span class="o">.</span><span class="na">setTransactionIsolation</span><span class="o">(</span><span class="n">level</span><span class="o">.</span><span class="na">getLevel</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">connection</span> <span class="o">=</span> <span class="n">wrapConnection</span><span class="o">(</span><span class="n">connection</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Transaction</span> <span class="n">tx</span> <span class="o">=</span> <span class="n">transactionFactory</span><span class="o">.</span><span class="na">newTransaction</span><span class="o">(</span><span class="n">connection</span><span class="o">,</span> <span class="n">autoCommit</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Executor</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">configuration</span><span class="o">.</span><span class="na">newExecutor</span><span class="o">(</span><span class="n">tx</span><span class="o">,</span> <span class="n">execType</span><span class="o">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="nf">DefaultSqlSession</span><span class="o">(</span><span class="n">configuration</span><span class="o">,</span> <span class="n">executor</span><span class="o">,</span> <span class="n">autoCommit</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">closeConnection</span><span class="o">(</span><span class="n">connection</span><span class="o">);</span>
</span><span class='line'>      <span class="k">throw</span> <span class="n">ExceptionFactory</span><span class="o">.</span><span class="na">wrapException</span><span class="o">(</span><span class="err">“</span><span class="n">Error</span> <span class="n">opening</span> <span class="n">session</span><span class="o">.</span>  <span class="nl">Cause:</span> <span class="err">“</span> <span class="o">+</span> <span class="n">e</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">ErrorContext</span><span class="o">.</span><span class="na">instance</span><span class="o">().</span><span class="na">reset</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>可以看到DefaultSqlSession是在打开session时创建的，而且在创建DefaultSqlSession之前，通过调用了Configuration类的newExecutor方法创建相应的Executor实例。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Configuration.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">public</span> <span class="n">Executor</span> <span class="nf">newExecutor</span><span class="o">(</span><span class="n">Transaction</span> <span class="n">transaction</span><span class="o">,</span> <span class="n">ExecutorType</span> <span class="n">executorType</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">executorType</span> <span class="o">=</span> <span class="n">executorType</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="n">defaultExecutorType</span> <span class="o">:</span> <span class="n">executorType</span><span class="o">;</span>
</span><span class='line'>    <span class="n">executorType</span> <span class="o">=</span> <span class="n">executorType</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="n">ExecutorType</span><span class="o">.</span><span class="na">SIMPLE</span> <span class="o">:</span> <span class="n">executorType</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Executor</span> <span class="n">executor</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">ExecutorType</span><span class="o">.</span><span class="na">BATCH</span> <span class="o">==</span> <span class="n">executorType</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">executor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BatchExecutor</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">transaction</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ExecutorType</span><span class="o">.</span><span class="na">REUSE</span> <span class="o">==</span> <span class="n">executorType</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">executor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ReuseExecutor</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">transaction</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">executor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SimpleExecutor</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">transaction</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">cacheEnabled</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">executor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CachingExecutor</span><span class="o">(</span><span class="n">executor</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">executor</span> <span class="o">=</span> <span class="o">(</span><span class="n">Executor</span><span class="o">)</span> <span class="n">interceptorChain</span><span class="o">.</span><span class="na">pluginAll</span><span class="o">(</span><span class="n">executor</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">executor</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>代码还是比较清晰地，通过读取配置文件里的内容来创建Executor实例。到这里为止，在DefaultSqlSession创建完成后就会持有相应的Executor实例，如果是配置了缓存，那么将会创建CachingExecutor。而且CachingExecutor类里将会持有下列Executor的其中一种：BatchExecutor，ReuseExecutor和SimpleExecutor。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>CachingExecutor.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CachingExecutor</span> <span class="kd">implements</span> <span class="n">Executor</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">private</span> <span class="n">Executor</span> <span class="n">delegate</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">TransactionalCacheManager</span> <span class="n">tcm</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TransactionalCacheManager</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="n">CachingExecutor</span><span class="o">(</span><span class="n">Executor</span> <span class="n">delegate</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">delegate</span> <span class="o">=</span> <span class="n">delegate</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="n">List</span> <span class="n">query</span><span class="o">(</span><span class="n">MappedStatement</span> <span class="n">ms</span><span class="o">,</span> <span class="n">Object</span> <span class="n">parameterObject</span><span class="o">,</span> <span class="n">RowBounds</span> <span class="n">rowBounds</span><span class="o">,</span> <span class="n">ResultHandler</span> <span class="n">resultHandler</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SQLException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">ms</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Cache</span> <span class="n">cache</span> <span class="o">=</span> <span class="n">ms</span><span class="o">.</span><span class="na">getCache</span><span class="o">();</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">cache</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">flushCacheIfRequired</span><span class="o">(</span><span class="n">ms</span><span class="o">);</span>
</span><span class='line'>        <span class="n">cache</span><span class="o">.</span><span class="na">getReadWriteLock</span><span class="o">().</span><span class="na">readLock</span><span class="o">().</span><span class="na">lock</span><span class="o">();</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">ms</span><span class="o">.</span><span class="na">isUseCache</span><span class="o">()</span> <span class="o">&amp;</span><span class="n">amp</span><span class="o">;&amp;</span><span class="n">amp</span><span class="o">;</span> <span class="n">resultHandler</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">CacheKey</span> <span class="n">key</span> <span class="o">=</span> <span class="n">createCacheKey</span><span class="o">(</span><span class="n">ms</span><span class="o">,</span> <span class="n">parameterObject</span><span class="o">,</span> <span class="n">rowBounds</span><span class="o">);</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">List</span> <span class="n">cachedList</span> <span class="o">=</span> <span class="o">(</span><span class="n">List</span><span class="o">)</span> <span class="n">cache</span><span class="o">.</span><span class="na">getObject</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">cachedList</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="n">cachedList</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">List</span> <span class="n">list</span> <span class="o">=</span> <span class="n">delegate</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="n">ms</span><span class="o">,</span> <span class="n">parameterObject</span><span class="o">,</span> <span class="n">rowBounds</span><span class="o">,</span> <span class="n">resultHandler</span><span class="o">);</span>
</span><span class='line'>              <span class="n">tcm</span><span class="o">.</span><span class="na">putObject</span><span class="o">(</span><span class="n">cache</span><span class="o">,</span> <span class="n">key</span><span class="o">,</span> <span class="n">list</span><span class="o">);</span>
</span><span class='line'>              <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">delegate</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="n">ms</span><span class="o">,</span> <span class="n">parameterObject</span><span class="o">,</span> <span class="n">rowBounds</span><span class="o">,</span> <span class="n">resultHandler</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">cache</span><span class="o">.</span><span class="na">getReadWriteLock</span><span class="o">().</span><span class="na">readLock</span><span class="o">().</span><span class="na">unlock</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">delegate</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="n">ms</span><span class="o">,</span> <span class="n">parameterObject</span><span class="o">,</span> <span class="n">rowBounds</span><span class="o">,</span> <span class="n">resultHandler</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="n">CacheKey</span> <span class="n">createCacheKey</span><span class="o">(</span><span class="n">MappedStatement</span> <span class="n">ms</span><span class="o">,</span> <span class="n">Object</span> <span class="n">parameterObject</span><span class="o">,</span> <span class="n">RowBounds</span> <span class="n">rowBounds</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">delegate</span><span class="o">.</span><span class="na">createCacheKey</span><span class="o">(</span><span class="n">ms</span><span class="o">,</span> <span class="n">parameterObject</span><span class="o">,</span> <span class="n">rowBounds</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>与iBatis最大的不同是，在从缓存中读取数据之前，要先获取读锁。读锁可以由多个读线程同时持有，而写线程同时只能有一个线程持有。但是读写锁会有一个饥渴写的问题，具体可以参考<a href="http://en.wikipedia.org/wiki/Readers-writers_problem" title="Readers-writers_problem">读写锁的问题</a>。</p>

<p>Executor类也是采用了装饰模式来实现，查询对象委托给持有的Executor类的实例来执行。如果缓存中没有，就交TransactionalCacheManager类来把对象存放到缓存中去。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>TransactionalCacheManager.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TransactionalCacheManager</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">private</span> <span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">cache</span> <span class="o">,</span> <span class="n">TransactionalCache</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">transactionalCaches</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">cache</span> <span class="o">,</span> <span class="n">TransactionalCache</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">clear</span><span class="o">(</span><span class="n">Cache</span> <span class="n">cache</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">getTransactionalCache</span><span class="o">(</span><span class="n">cache</span><span class="o">).</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">putObject</span><span class="o">(</span><span class="n">Cache</span> <span class="n">cache</span><span class="o">,</span> <span class="n">CacheKey</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">getTransactionalCache</span><span class="o">(</span><span class="n">cache</span><span class="o">).</span><span class="na">putObject</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">commit</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">TransactionalCache</span> <span class="n">txCache</span> <span class="o">:</span> <span class="n">transactionalCaches</span><span class="o">.</span><span class="na">values</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">txCache</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">rollback</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">TransactionalCache</span> <span class="n">txCache</span> <span class="o">:</span> <span class="n">transactionalCaches</span><span class="o">.</span><span class="na">values</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">txCache</span><span class="o">.</span><span class="na">rollback</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">private</span> <span class="n">TransactionalCache</span> <span class="n">getTransactionalCache</span><span class="o">(</span><span class="n">Cache</span> <span class="n">cache</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">TransactionalCache</span> <span class="n">txCache</span> <span class="o">=</span> <span class="n">transactionalCaches</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">cache</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">txCache</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">txCache</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TransactionalCache</span><span class="o">(</span><span class="n">cache</span><span class="o">);</span>
</span><span class='line'>      <span class="n">transactionalCaches</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">cache</span><span class="o">,</span> <span class="n">txCache</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">txCache</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>第一次看到这个类的名字感觉有点奇怪，缓存相关的类怎么取了个事务的名字，后来读到TransactionalCache类后才明白原因。继续往下看，在TransactionalCacheManager中，最终还是用TransactionalCache类的put方法。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>TransactionalCache.java  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TransactionalCache</span> <span class="kd">implements</span> <span class="n">Cache</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">private</span> <span class="n">Cache</span> <span class="n">delegate</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">clearOnCommit</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">object</span> <span class="o">,</span> <span class="n">AddEntry</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">entriesToAddOnCommit</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">object</span> <span class="o">,</span> <span class="n">RemoveEntry</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">entriesToRemoveOnCommit</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">putObject</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">,</span> <span class="n">Object</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">entriesToRemoveOnCommit</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="n">entriesToAddOnCommit</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="k">new</span> <span class="n">AddEntry</span><span class="o">(</span><span class="n">delegate</span><span class="o">,</span> <span class="n">key</span><span class="o">,</span> <span class="n">object</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="n">Object</span> <span class="n">removeObject</span><span class="o">(</span><span class="n">Object</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">entriesToAddOnCommit</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>    <span class="n">entriesToRemoveOnCommit</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="k">new</span> <span class="n">RemoveEntry</span><span class="o">(</span><span class="n">delegate</span><span class="o">,</span> <span class="n">key</span><span class="o">));</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">delegate</span><span class="o">.</span><span class="na">getObject</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">commit</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">delegate</span><span class="o">.</span><span class="na">getReadWriteLock</span><span class="o">().</span><span class="na">writeLock</span><span class="o">().</span><span class="na">lock</span><span class="o">();</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">clearOnCommit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">delegate</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">RemoveEntry</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">entriesToRemoveOnCommit</span><span class="o">.</span><span class="na">values</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">entry</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">AddEntry</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">entriesToAddOnCommit</span><span class="o">.</span><span class="na">values</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">entry</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">reset</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">delegate</span><span class="o">.</span><span class="na">getReadWriteLock</span><span class="o">().</span><span class="na">writeLock</span><span class="o">().</span><span class="na">unlock</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>我们可以看到在TransactionalCache类里也维护着两个HashMap：entriesToAddOnCommit和entriesToRemoveOnCommit。当在TransactionalCacheManager中调用putObject和removeObject方法的时候并不是马上就把对象存放到缓存或者从缓存中删除，而是先把这个对象放到这两个HashMap之中的一个里，然后当执行commit方法时再真正地把对象存放到缓存或者从缓存中删除。现在我们应该可以明白为TransactionalCacheManager和TransactionalCache这两个类要加上事务的前缀了，因为commit方法是一个原子操作，一次会操作多个对象，要么一起成功，要么就一起失败。</p>

<p><strong>三.总结</strong></p>

<p>通过这次对iBatis以及myBatis的源码进行分析，发现他们的缓存在设计和实现上都存在一些问题。比如iBatis有两个集合不同步的问题，myBatis的读写锁有写饥渴问题等。这些问题都会给性能造成影响，所以还是不建议在生产环境中使用iBatis或者myBatis自带的二级缓存，只使用他们的ORM功能，而二级缓存还是交给Memcached来实现吧。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iBatis和myBatis源码分析之日志]]></title>
    <link href="http://liuxuan.info/blog/2011/08/26/ibatis-and-mybatis-source-code-analysis-logging/"/>
    <updated>2011-08-26T18:20:00+08:00</updated>
    <id>http://liuxuan.info/blog/2011/08/26/ibatis-and-mybatis-source-code-analysis-logging</id>
    <content type="html"><![CDATA[<p><strong>一.包结构分析</strong></p>

<p>1.iBatis的logging包结构：</p>

<table border="1" width="100%" cellpadding="3" cellspacing="0" summary=""><tbody><tr>
<th align="left" colspan="2" style="background-color:#CCCCFF">
<b>Packages</b></th></tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.common.logging</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.common.logging.jakarta</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.common.logging.jdk14</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.common.logging.log4j</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.common.logging.nologging</b></td>
<td>&nbsp;</td>
</tr>
</tbody></table>

<p>iBatis把对logging支持的类全部放在了common包的子包下，并且又根据不同的logging实现又分成了commons-logging，jdk1.4自带的logging，log4j和nologging四个子包。个人感觉整个包的划分还是非常清晰的，但是nologging包的存在感觉有点鸡肋，因为日志是一个系统必备的功能之一，很难想象一个系统缺少了日志怎么做数据分析，性能调优等。难道作者认为有些时候或有一天就不需要日志了？ <!--more--></p>

<p>2.myBatis的logging包结构：</p>

<table border="1" width="100%" cellpadding="3" cellspacing="0" summary=""><tbody><tr>
<th align="left" colspan="2" style="background-color:#CCCCFF">
<b>Packages</b></th></tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.logging</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.logging.commons</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.logging.jdbc</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.logging.jdk14</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.logging.log4j</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.logging.nologging</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.logging.slf4j</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.logging.stdout</b></td>
<td>&nbsp;</td>
</tr>
</tbody></table>

<p>可以看到myBatis的logging包结构较之iBatis基本没变，但是增加了jdbc，slf4j以及stdout的支持。对jdbc执行sql语句的日志支持看上去很美好，但是给性能带来的影响比较大，这个等下面的源码分析再详细说明；增加对slf4j的支持应该是大势所趋没有问题；而增加对stdout的支持是一个很好的功能，在测试阶段应该会是一个很好的日志功能实现。</p>

<p><strong>二.源码分析</strong></p>

<p>1.iBatis</p>

<p>(1)Log接口：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Log</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">boolean</span> <span class="n">isDebugEnabled</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">error</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="n">Throwable</span> <span class="n">e</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">error</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">debug</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">void</span> <span class="n">warn</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Log接口定义了三个log级别，所有的log实现都会去实现这个接口，所以它是所有log的代表。</p>

<p>(2)LogFactory工厂类：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LogFactory</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">static</span> <span class="n">Constructor</span> <span class="n">logConstructor</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">tryImplementation</span><span class="o">(</span><span class="err">“</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">commons</span><span class="o">.</span><span class="na">logging</span><span class="o">.</span><span class="na">LogFactory</span><span class="err">”</span><span class="o">,</span> <span class="err">“</span><span class="n">com</span><span class="o">.</span><span class="na">ibatis</span><span class="o">.</span><span class="na">common</span><span class="o">.</span><span class="na">logging</span><span class="o">.</span><span class="na">jakarta</span><span class="o">.</span><span class="na">JakartaCommonsLoggingImpl</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>    <span class="n">tryImplementation</span><span class="o">(</span><span class="err">“</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">log4j</span><span class="o">.</span><span class="na">Logger</span><span class="err">”</span><span class="o">,</span> <span class="err">“</span><span class="n">com</span><span class="o">.</span><span class="na">ibatis</span><span class="o">.</span><span class="na">common</span><span class="o">.</span><span class="na">logging</span><span class="o">.</span><span class="na">log4j</span><span class="o">.</span><span class="na">Log4jImpl</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>    <span class="n">tryImplementation</span><span class="o">(</span><span class="err">“</span><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">logging</span><span class="o">.</span><span class="na">Logger</span><span class="err">”</span><span class="o">,</span> <span class="err">“</span><span class="n">com</span><span class="o">.</span><span class="na">ibatis</span><span class="o">.</span><span class="na">common</span><span class="o">.</span><span class="na">logging</span><span class="o">.</span><span class="na">jdk14</span><span class="o">.</span><span class="na">Jdk14LoggingImpl</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>    <span class="n">tryImplementation</span><span class="o">(</span><span class="err">“</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Object</span><span class="err">”</span><span class="o">,</span> <span class="err">“</span><span class="n">com</span><span class="o">.</span><span class="na">ibatis</span><span class="o">.</span><span class="na">common</span><span class="o">.</span><span class="na">logging</span><span class="o">.</span><span class="na">nologging</span><span class="o">.</span><span class="na">NoLoggingImpl</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="n">tryImplementation</span><span class="o">(</span><span class="n">String</span> <span class="n">testClassName</span><span class="o">,</span> <span class="n">String</span> <span class="n">implClassName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">logConstructor</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Resources</span><span class="o">.</span><span class="na">classForName</span><span class="o">(</span><span class="n">testClassName</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Class</span> <span class="n">implClass</span> <span class="o">=</span> <span class="n">Resources</span><span class="o">.</span><span class="na">classForName</span><span class="o">(</span><span class="n">implClassName</span><span class="o">);</span>
</span><span class='line'>        <span class="n">logConstructor</span> <span class="o">=</span> <span class="n">implClass</span><span class="o">.</span><span class="na">getConstructor</span><span class="o">(</span><span class="k">new</span> <span class="n">Class</span><span class="o">[]{</span><span class="n">Class</span><span class="o">.</span><span class="na">class</span><span class="o">});</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="n">Log</span> <span class="n">getLog</span><span class="o">(</span><span class="n">Class</span> <span class="n">aClass</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">(</span><span class="n">Log</span><span class="o">)</span><span class="n">logConstructor</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="k">new</span> <span class="n">Object</span><span class="o">[]{</span><span class="n">aClass</span><span class="o">});</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="err">“</span><span class="n">Error</span> <span class="n">creating</span> <span class="n">logger</span> <span class="k">for</span> <span class="kd">class</span> <span class="err">“ + </span><span class="nc">aClass</span> <span class="o">+</span> <span class="err">“</span><span class="o">.</span>  <span class="nl">Cause:</span> <span class="err">“</span> <span class="o">+</span> <span class="n">t</span><span class="o">,</span> <span class="n">t</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="n">selectLog4JLogging</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Resources</span><span class="o">.</span><span class="na">classForName</span><span class="o">(</span><span class="err">“</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">log4j</span><span class="o">.</span><span class="na">Logger</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Class</span> <span class="n">implClass</span> <span class="o">=</span> <span class="n">Resources</span><span class="o">.</span><span class="na">classForName</span><span class="o">(</span><span class="err">“</span><span class="n">com</span><span class="o">.</span><span class="na">ibatis</span><span class="o">.</span><span class="na">common</span><span class="o">.</span><span class="na">logging</span><span class="o">.</span><span class="na">log4j</span><span class="o">.</span><span class="na">Log4jImpl</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>      <span class="n">logConstructor</span> <span class="o">=</span> <span class="n">implClass</span><span class="o">.</span><span class="na">getConstructor</span><span class="o">(</span><span class="k">new</span> <span class="n">Class</span><span class="o">[]{</span><span class="n">Class</span><span class="o">.</span><span class="na">class</span><span class="o">});</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="n">selectJavaLogging</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Resources</span><span class="o">.</span><span class="na">classForName</span><span class="o">(</span><span class="err">“</span><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">logging</span><span class="o">.</span><span class="na">Logger</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Class</span> <span class="n">implClass</span> <span class="o">=</span> <span class="n">Resources</span><span class="o">.</span><span class="na">classForName</span><span class="o">(</span><span class="err">“</span><span class="n">com</span><span class="o">.</span><span class="na">ibatis</span><span class="o">.</span><span class="na">common</span><span class="o">.</span><span class="na">logging</span><span class="o">.</span><span class="na">jdk14</span><span class="o">.</span><span class="na">Jdk14LoggingImpl</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>      <span class="n">logConstructor</span> <span class="o">=</span> <span class="n">implClass</span><span class="o">.</span><span class="na">getConstructor</span><span class="o">(</span><span class="k">new</span> <span class="n">Class</span><span class="o">[]{</span><span class="n">Class</span><span class="o">.</span><span class="na">class</span><span class="o">});</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在这个工厂类里我们可以非常容易地感觉到“坏味道”，那就是在catch块中什么都不做，这是应该尽量避免出现的情况。在static块中会尝试依次加载所有的log实现类，这点也是值得商榷的。因为在一个系统中一般只使用一种日志实现，一次性加载所有的实现只会带来性能问题；还有一个问题就是是否需要动态切换日志实现的功能，至少我觉得这个功能也是个鸡肋。</p>

<p>2.myBatis</p>

<p>(1)Log接口与iBatis的没有变化</p>

<p>(3)LogFactory工厂类：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LogFactory</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">static</span> <span class="n">Constructor</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="o">?</span> <span class="kd">extends</span> <span class="n">Log</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">logConstructor</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">tryImplementation</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">useSlf4jLogging</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>    <span class="n">tryImplementation</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">useCommonsLogging</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>    <span class="n">tryImplementation</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">useLog4JLogging</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>    <span class="n">tryImplementation</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">useJdkLogging</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>    <span class="n">tryImplementation</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">useNoLogging</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="n">Log</span> <span class="n">getLog</span><span class="o">(</span><span class="n">Class</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="o">?&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">aClass</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">logConstructor</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="k">new</span> <span class="n">Object</span><span class="o">[]{</span><span class="n">aClass</span><span class="o">});</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">LogException</span><span class="o">(</span><span class="err">“</span><span class="n">Error</span> <span class="n">creating</span> <span class="n">logger</span> <span class="k">for</span> <span class="kd">class</span> <span class="err">“ + </span><span class="nc">aClass</span> <span class="o">+</span> <span class="err">“</span><span class="o">.</span>  <span class="nl">Cause:</span> <span class="err">“</span> <span class="o">+</span> <span class="n">t</span><span class="o">,</span> <span class="n">t</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="n">useSlf4jLogging</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">setImplementation</span><span class="o">(</span><span class="err">“</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">ibatis</span><span class="o">.</span><span class="na">logging</span><span class="o">.</span><span class="na">slf4j</span><span class="o">.</span><span class="na">Slf4jImpl</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="n">useCommonsLogging</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">setImplementation</span><span class="o">(</span><span class="err">“</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">ibatis</span><span class="o">.</span><span class="na">logging</span><span class="o">.</span><span class="na">commons</span><span class="o">.</span><span class="na">JakartaCommonsLoggingImpl</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="n">useLog4JLogging</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">setImplementation</span><span class="o">(</span><span class="err">“</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">ibatis</span><span class="o">.</span><span class="na">logging</span><span class="o">.</span><span class="na">log4j</span><span class="o">.</span><span class="na">Log4jImpl</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="n">useJdkLogging</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">setImplementation</span><span class="o">(</span><span class="err">“</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">ibatis</span><span class="o">.</span><span class="na">logging</span><span class="o">.</span><span class="na">jdk14</span><span class="o">.</span><span class="na">Jdk14LoggingImpl</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="n">useStdOutLogging</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">setImplementation</span><span class="o">(</span><span class="err">“</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">ibatis</span><span class="o">.</span><span class="na">logging</span><span class="o">.</span><span class="na">stdout</span><span class="o">.</span><span class="na">StdOutImpl</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="n">useNoLogging</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">setImplementation</span><span class="o">(</span><span class="err">“</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">ibatis</span><span class="o">.</span><span class="na">logging</span><span class="o">.</span><span class="na">nologging</span><span class="o">.</span><span class="na">NoLoggingImpl</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="n">tryImplementation</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">runnable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">logConstructor</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">runnable</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//ignore</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="n">setImplementation</span><span class="o">(</span><span class="n">String</span> <span class="n">implClassName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="err">“</span><span class="n">unchecked</span><span class="err">”</span><span class="o">)</span>
</span><span class='line'>      <span class="n">Class</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="o">?</span> <span class="kd">extends</span> <span class="n">Log</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">implClass</span> <span class="o">=</span> <span class="o">(</span><span class="n">Class</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="o">?</span> <span class="kd">extends</span> <span class="n">Log</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;)</span> <span class="n">Resources</span><span class="o">.</span><span class="na">classForName</span><span class="o">(</span><span class="n">implClassName</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Constructor</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="o">?</span> <span class="kd">extends</span> <span class="n">Log</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">candidate</span> <span class="o">=</span> <span class="n">implClass</span><span class="o">.</span><span class="na">getConstructor</span><span class="o">(</span><span class="k">new</span> <span class="n">Class</span><span class="o">[]{</span><span class="n">Class</span><span class="o">.</span><span class="na">class</span><span class="o">});</span>
</span><span class='line'>      <span class="n">Log</span> <span class="n">log</span> <span class="o">=</span> <span class="n">candidate</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="k">new</span> <span class="n">Object</span><span class="o">[]{</span><span class="n">LogFactory</span><span class="o">.</span><span class="na">class</span><span class="o">});</span>
</span><span class='line'>      <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="err">“</span><span class="n">Logging</span> <span class="n">initialized</span> <span class="n">using</span> <span class="err">‘”</span> <span class="o">+</span> <span class="n">implClassName</span> <span class="o">+</span> <span class="err">“’</span> <span class="n">adapter</span><span class="o">.</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>      <span class="n">logConstructor</span> <span class="o">=</span> <span class="n">candidate</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">LogException</span><span class="o">(</span><span class="err">“</span><span class="n">Error</span> <span class="n">setting</span> <span class="n">Log</span> <span class="n">implementation</span><span class="o">.</span>  <span class="nl">Cause:</span> <span class="err">“</span> <span class="o">+</span> <span class="n">t</span><span class="o">,</span> <span class="n">t</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在myBatis的实现里，除了加入了范型，多线程外没有什么太大的变化。还是要加载所有的log实现类，但是更大的问题是加载方法用synchronized来修饰了，且不论是否有必要全部加载，但就全部的同步方法就会给性能造成负面影响；而且在iBatis中的“坏味道”依旧存在。</p>

<p>三.总结</p>

<p>在这篇博文里比较了iBatis和myBatis的log实现，发现了存在“坏味道”，即在catch块中什么事都没做，这种情况应该避免发生；还有一次性加载所有的log实现类以及动态切换log实现都是不太常用的功能，如果要用iBatis或myBatis的log实现的话需要修改源代码来提高性能。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iBatis和myBatis源码分析之概览]]></title>
    <link href="http://liuxuan.info/blog/2011/08/24/ibatis-and-mybatis-source-code-analysis-overview/"/>
    <updated>2011-08-24T18:08:00+08:00</updated>
    <id>http://liuxuan.info/blog/2011/08/24/ibatis-and-mybatis-source-code-analysis-overview</id>
    <content type="html"><![CDATA[<p><strong>一.写在最前</strong></p>

<p>记得第一次知道<a href="http://ibatis.apache.org/" title="iBatis">iBatis</a>这个框架还是在2、3年前，那段时间Hibernate风头正劲，Java EE开发已经被概括为SSH，各个软件公司把Hibernate作为Java程序员一种标配的技能而来考核。正是在这样一种情况下，iBatis作为与Hibernate不同的ORM思想的实现，仍然被一部分开发者喜爱和支持，当然我也是其中之一。而且在一个偶然的机会让我知道原来淘宝的ORM工具也是用的iBatis后，就更加坚定了我对iBatis的信心(可能是因为Rails的关系，现在我觉得<a href="http://www.springsource.org/roo" title="Spring Roo">Spring Roo</a>会更有前途)。 <!--more--></p>

<p>其实当初我开始学习Hibernate的时候就感觉非常的复杂，基本上大部分时间都是花在学习怎么编写hbm.xml映射文件上的。Hibernate文档中的配置说明又非常得多，对于数据库表的各种关系的映射配置都在文档中有着比较详细的描述，整个文档有好几百页长。所以，当时我就觉得这也有点太复杂了，如果一个表有很多字段，并且这个表与其他多个表之间有着复杂的关系，那么编写hbm.xml文件将会是一件苦不堪言的工作。更有甚者，编写完了映射关系还不算完，还要配置字段的属性，而字段属性数量繁多，足以让你在其中摸不着头脑，非常蛋疼。</p>

<p>我并不是说Hibernate不好，因为好与不好是相对的。个人觉得Hibernate在Java企业级开发中还是非常有市场的，毕竟Hibernate已经非常成熟，会使用Hibernate的开发人员也多。但是，在商业网站开发领域，随着对性能的要求不断增加或者说苛刻的地步，数据库端的查询已经基本上放弃了多表之间的join操作以求达到比较理想的性能要求。在这样一个趋势下，Hibernate的作用就不大了。而且hql不利于优化的缺点对于数据库优化来说将成为性能瓶颈所在。对于商业网站而言，Java不能满足快速迭代开发的要求，越来越多的Web2.0网站采用PHP、Ruby或者Python作为开发语言，这也是我为什么觉得Spring Roo更有前途的原因。</p>

<p>不管怎样，Hibernate和iBatis是Java EE平台上非常优秀的ORM框架。但是对我而言，iBatis更轻量，对SQL的映射更符合我的理念，所以就趁现在有时间就来分析一下iBatis的源码。而就在去年，iBatis已经改名为<a href="http://www.mybatis.org" title="myBatis">myBatis</a>，我决定在分析源码的同时对这两个版本做一个比较。但是并不只是分析源码，其中还会加入对JDK源码的分析以及依赖的第三方框架的分析，我希望这次的分析是一个非常细致的分析系列。</p>

<p><strong>二.概览</strong></p>

<p>这篇博文是iBatis/myBatis源码分析系列的第一篇，我想首先来对iBatis和myBatis的整个结构做一个概览。首先来看一下iBatis的包结构(版本为2.3.4.726)：</p>

<table border="1" width="100%" cellpadding="3" cellspacing="0" summary=""><tbody><tr>
<th align="left" colspan="2" style="background-color:#CCCCFF">
<b>Packages</b></th></tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.common.beans</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.common.io</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.common.jdbc</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.common.jdbc.exception</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.common.jdbc.logging</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.common.logging</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.common.logging.jakarta</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.common.logging.jdk14</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.common.logging.log4j</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.common.logging.nologging</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.common.resources</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.common.util</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.common.xml</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.client</b></td>
<td>This package contains the core library client interface.</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.client.event</b></td>
<td>This package contains event handler interfaces.</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.client.extensions</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.accessplan</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.builder.xml</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.cache</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.cache.fifo</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.cache.lru</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.cache.memory</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.cache.oscache</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.config</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.datasource</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.exchange</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.execution</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.impl</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.mapping.parameter</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.mapping.result</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.mapping.result.loader</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.mapping.sql</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.mapping.sql.dynamic</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.mapping.sql.dynamic.elements</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.mapping.sql.raw</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.mapping.sql.simple</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.mapping.sql.stat</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.mapping.statement</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.scope</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.transaction</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.transaction.external</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.transaction.jdbc</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.transaction.jta</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.transaction.user</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>com.ibatis.sqlmap.engine.type</b></td>
<td>&nbsp;</td>
</tr>
</tbody></table>
<p>我们可以看到，iBatis整个包结构非常的简单，一目了然。仔细观察后可以说就分为两大部分：<strong>common</strong>和<strong>sqlmap</strong>。common包中包括了除了iBatis核心包之外的所有工具类包；而sqlmap包则是整个iBatis的核心包的所在，它又是由两部分组成：<strong>client</strong>和<strong>engine</strong>。client包是操作CRUD的对象所在的包，engine包则是iBatis用来处理映射关系的核心包。</p>

<p>再来看myBatis的包结构(版本为3.05)：</p>

<table border="1" width="100%" cellpadding="3" cellspacing="0" summary=""><tbody><tr>
<th align="left" colspan="2" style="background-color:#CCCCFF">
<b>Packages</b></th></tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.annotations</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.binding</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.builder</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.builder.annotation</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.builder.xml</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.builder.xml.dynamic</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.cache</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.cache.decorators</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.cache.impl</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.datasource</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.datasource.jndi</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.datasource.pooled</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.datasource.unpooled</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.exceptions</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.executor</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.executor.keygen</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.executor.loader</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.executor.parameter</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.executor.result</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.executor.resultset</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.executor.statement</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.io</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.jdbc</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.logging</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.logging.commons</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.logging.jdbc</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.logging.jdk14</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.logging.log4j</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.logging.nologging</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.logging.slf4j</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.logging.stdout</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.mapping</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.metadata</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.migration</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.migration.commands</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.parsing</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.plugin</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.reflection</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.reflection.factory</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.reflection.invoker</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.reflection.property</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.reflection.wrapper</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.session</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.session.defaults</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.transaction</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.transaction.jdbc</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.transaction.managed</b></td>
<td>&nbsp;</td>
</tr>
<tr bgcolor="white">
<td width="20%"><b>org.apache.ibatis.type</b></td>
<td>&nbsp;</td>
</tr>
</tbody></table>

<p>我们可以看到在myBatis的包结构中，各个独立的功能被抽取出来单独成为一了个包，可以说是细化了整个框架的功能分类，较之iBatis整个包结构也更加清晰。除了包结构的变化，我们还可以看到在myBatis中加入了一些新的特性,比如增加了对annotation的支持，日志增加了对slf4j的支持等。</p>

<p>整个概述就到这里，在接下来的一系列博文里将详细地分析各个包已经类和方法的作用。</p>

]]></content>
  </entry>
  
</feed>
