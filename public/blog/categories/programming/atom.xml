<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Zhixingheyi]]></title>
  <link href="http://liuxuan.info/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://liuxuan.info/"/>
  <updated>2012-11-28T21:10:24+08:00</updated>
  <id>http://liuxuan.info/</id>
  <author>
    <name><![CDATA[Foredoomed]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hashing神话]]></title>
    <link href="http://liuxuan.info/blog/2012/10/21/hashing-myths/"/>
    <updated>2012-10-21T20:33:00+08:00</updated>
    <id>http://liuxuan.info/blog/2012/10/21/hashing-myths</id>
    <content type="html"><![CDATA[<p>最近许多网站的用户名和秘密都被泄露，这也引发了一场对密码的存储问题的大讨论。其中的核心就是hashing，所以就让我们来看看关于hashing的几个常见的误解吧。这篇博文是一篇英文帖子的翻译，原文请戳<a href="http://webdevrefinery.com/forums/topic/4850-hashing-myths/page_hl_hashing" title="Hashing Myths">Hashing Myths</a>。</p>

<p><strong>神话#1：Hashing后的结果是独一无二的</strong></p>

<p><strong>大错特错</strong>。让我们用简单的逻辑来解释。比如有一个32位长的hash，如果再对33位长的字符串hash的话，就有可能产生相同的hash(又叫“碰撞”)。道理很简单，33位长字符串的排列组合比32位长的字符串要多得多，因为可以在32位长字符串的尾部加上一个任意字符就是33位长的字符串。所以打个比方来说，如果有90000个33位长字符串和20000个32位长字符串，前者其中的某些字符串一定跟后者中的一些字符串的hash值相同。Hashing算法的目的是尽量减少碰撞，<strong>但是不可能完全消除碰撞</strong>。</p>

<!-- more -->

<p><strong>神话#2：MD5是不安全的</strong></p>

<p><strong>大错特错</strong>。MD5是比SHA-256来说没那么负责(因此速度更快)的算法，但是这个算法是安全的。一个不安全的hash代表这个hash可以被逆向破解，或者可以仅凭hash值就可以用一个字符串产生相同的hash，而在MD5下不行。事实上最接近的是修改一个存在的大文件，但是并不改变它已有的hash值。人类历史上还没有一个人能够逆向破解MD5。产生这个误解是因为MD5是一个常见的秘密破解攻击对象，这就又产生了下一个误解。</p>

<p><strong>神话#3：MD5没有其他hash算法(像SHA)安全</strong></p>

<p><strong>大错特错</strong>。如果你有秘密的hash值的话，那么确定就有三种攻击手段来找出密码原文。<br />
1. 查hash数据库。你可以到在线的hash数据库里查有没有你的hash。对于这种攻击的常见防范手段就是对秘密hash时加<a href="http://en.wikipedia.org/wiki/Salt_(cryptography)" title="salt">salt</a>。<br />
2. Brute force算法。对字典中的所有单词hash，比较是否符合。如果没用的话就对5，6，7，8位长所有可能的字符串hash。这种攻击需要消耗大量时间，而且经常得不到想要的结果，而且很容易的用salt来防范。<br />
3. Rainbow tables。这是hashing和rehashing方法，它可以找到不同单词的hash值的相似之处，并最终找到秘密原文。salt在这种攻击下作用不大。  </p>

<p><strong>神话#4：复杂超常的hash值(像SHA-256)不容易被攻击</strong></p>

<p><strong>大错特错</strong>。Hash破解的最大威胁是Rainbow table，它是时间和空间的折衷，经常在1分钟之内就能破解密码。但是Rainbow table并不神奇，大多数人更容易去相信，而不是理解它的原理。如果你有15分钟的话可以看下<a href="http://en.wikipedia.org/wiki/Rainbow_table" title="rainbow table">介绍</a>。</p>

<p>如果你已经知道Rainbow table的原理的话，你就会知道它最大的弱点就是hash碰撞。所以安全密码的hash是一个折折衷：你希望的是一个算法产生的碰撞越少越好，这样两个秘密就不会产生相同的hash；但你又希望这个算法能产生足够的碰撞，这样的话rainbow table就会陷入死循环，密码被破解的可能性也就降低了。就这两点说，SHA-256是可怕的。因为它几乎不产生碰撞，不管有没有salt，所以更容易被攻击。SHA-256适用与hash大文件而不是密码。</p>

<p><strong>神话#5：SHA-1仍然比MD5更好，因为MD5更容易被破解</strong></p>

<p><strong>大错特错</strong>。再一次你搞错了。SHA-1有160位，碰撞比MD5少，而且hash数据库和rainbow table对与SHA-1和MD5是一样的。这个误解在程序员中被广泛传播的原因是他们没有花时间去研究事实的真相。事实上，SHA产生的较长的hash对hash数据库和rainbow table的攻击几乎无用。与MD5相比，SHA-1只是多了一些存储空间，因为SHA-1有160位，而MD5才128位长。长度的增加可以减少碰撞的产生，相对大文件来说这对于密码的hash根本没用。</p>

<p><strong>神话#6：用多个算法hash就更安全</strong></p>

<p><strong>大错特错</strong>。我看到过这样的hash：<code>sha1(md5("Password"))</code>，这样的计算方式是非常荒谬的。你在把128位转换成160位，这会非常容易被破解。你不能多次hash。你为了防止被破解会在hash时多加一个处理步骤，但是最终结果还是一样的。不要猜什么更安全，要去理解什么更安全。</p>

<p><strong>神话#7：全局salt和用户salt的组合比单个用户salt更安全</strong></p>

<p>最近在一篇文章里有人支持用全局salt加上用户salt的方法，但是我认为这是没用的。我的观点遭到了强烈的反对，他们说黑客窃取数据库而不是源代码更安全。我同意，但是这种方式提供的安全性可以忽略不计。下面就是原因：</p>

<p>上面的三个hash攻击中，只有brute force法是用了全局salt比不用更难破解，但同时这个方法也是最难成功的方法。全局salt只是把几乎不可能变成非常不可能。我承认有点作用，但是黑客们的常用攻击手段是rainbow table而不是brute force，不然他们会发疯的。在rainbow table的攻击下，全局salt不比用户salt安全多少。如果有人可以窃取到你的数据库的拷贝，他们也可以轻易地窃取你源代码的拷贝。</p>

<p>如果你在寻找保护你数据库被窃取的方法的话，一个非常非常非常有效的方法就是对称加密hash。选择一个速度快，简单的对称加密算法(RC4,Blowfish等)，创建ke并保存在配置文件中，用它加密数据库中所有加过salt的密码hash。当从数据库中读取他们时，只要用key解密出来就可以了。现在即使有人入侵了数据库或服务器，就连rainbow table的攻击也对你的hash无效，这对在公共软件仍然有效，而且比全局salt要有效的多的多。</p>

<p><strong>那么密码hashing的最佳实践是什么呢？</strong></p>

<p>对于密码来说只有两个hash算法是比较好的选择：MD5和SHA-1，而你应该让你的编程语言来决定选择哪个算法。对于PHP和大多数语言来说，MD5比SHA-1快，所以MD5是比较好的选择。保证密码安全的关键是用一个合适长度的salt。安全的保存密码，避免字典和brute force的攻击是相对rainbow table来说比较安全的折衷点是用生成一个2倍于原本hash长度的hash。比如MD5的话，可以hash两个MD5生成的hash。你可以为它生成一个128位的salt(对许多用户来说会占用非常多的存储空间)，或者你可以hash一个字符串来生成salt。我最喜欢的方法是：</p>

<p><code>
$finalHash = md5(md5($salt) . md5($password))
</code>
这个方法的有点是：用两个MD5生成一个新的hash，它非常容易移植，因为任何一个语言(包括SQL)都支持上面的方法，3次MD5仍然是一个相对速度快的处理过程，而且如果是web的话，在密码发送到服务器之前，你可以用javascript来hash密码，而且仍然可以用它来生成最终的hash。</p>

<p>是否在最终hash上做对称加密完全取决于你。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入浅出Coroutine]]></title>
    <link href="http://liuxuan.info/blog/2012/08/18/head-first-coroutine/"/>
    <updated>2012-08-18T22:55:00+08:00</updated>
    <id>http://liuxuan.info/blog/2012/08/18/head-first-coroutine</id>
    <content type="html"><![CDATA[<p>说到coroutine(中文一般翻译成<strong>协程</strong>)，对于Java程序员来说可能有点陌生，因为Java语言本身并不支持coroutine，但是早在1963年这个想法就被提出来了。到目前为止，已经有很多语言提供了对coroutine的支持，比如Ruby，Python，Go，Erlang等。所以，理解coroutine是很有必要的。Lua是原生支持coroutine的语言之一，下面关于coroutine的例子都将使用Lua。</p>

<!-- more -->

<p>维基上给出的Coroutine定义是：</p>

<blockquote>
  <p>Coroutines are computer program components that generalize subroutines to allow multiple entry points for suspending and resuming execution at certain locations.</p>
</blockquote>

<p>上面这段中包含了另一个名词：subroutine，所以先来看一下subroutine的定义：</p>

<blockquote>
  <p>In computer science, a subroutine, also termed procedure, function, routine, method, or subprogram, is a part of source code within a larger computer program that performs a specific task and is relatively independent of the remaining code.</p>
</blockquote>

<p>也就是说subroutine就是方法或代码片段，方法或代码片段就是subroutine。现在就能翻译coroutine的定义了：</p>

<p><strong>Coroutine是允许多入口，即使方法或代码片段能够在某个地方挂起和继续执行的特性的程序组件。</strong></p>

<p>这句话对于Java程序员来说是具有颠覆性作用的，因为对于Java和那些不支持coroutine的语言来说，方法只有一个入口，也就是从方法体的大括号开始到结束的大括号为止。比如有个方法：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">foo</span><span class="o">(){</span>
</span><span class='line'>	<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="err">“</span><span class="n">hello</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'>	<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="err">“</span><span class="n">world</span><span class="err">”</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>每当foo方法被调用的时候，方法体中的语句都会被执行，即每次都会打印“helloworld”。然而coroutine允许方法执行到一半就挂起(通常是碰到yield关键字)，然后上下文状态会被保存下来，并且可以在之后恢复这个coroutine。考虑下面这段lua代码：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">function</span> <span class="nf">foo</span><span class="p">()</span>
</span><span class='line'>	<span class="nb">print</span><span class="p">(</span><span class="err">“</span><span class="n">hello</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'>	<span class="nb">coroutine.yield</span><span class="p">()</span> <span class="err">–</span> <span class="err">在这里挂起</span><span class="n">coroutine</span>
</span><span class='line'>	<span class="nb">print</span><span class="p">(</span><span class="err">“</span><span class="n">world</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">local</span> <span class="n">co</span> <span class="o">=</span> <span class="nb">coroutine.create</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span> <span class="err">–</span> <span class="n">co</span><span class="err">保存的是上下文变量</span>
</span><span class='line'><span class="nb">coroutine.resume</span><span class="p">(</span><span class="n">co</span><span class="p">)</span>         <span class="err">–</span> <span class="err">只打印出</span> <span class="n">hello</span>
</span><span class='line'><span class="nb">coroutine.resume</span><span class="p">(</span><span class="n">co</span><span class="p">)</span>         <span class="err">–</span> <span class="err">只打印出</span> <span class="n">world</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>第一次执行coroutine.resume(co)的时候，会从头开始执行foo函数，当遇到yield关键字时就会挂起coroutine，等到第二次执行coroutine.resume(co)的时候，会从上次coroutine挂起的地方继续执行，直到再次遇到yield或着函数结束。</p>

<p>coroutine在yield时还可以指定另一个coroutine，下面是维基上的例子：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var q := new queue&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>coroutine produce
</span><span class='line'>    loop
</span><span class='line'>        while q is not full
</span><span class='line'>            create some new items
</span><span class='line'>            add the items to q
</span><span class='line'>        yield to consume&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>coroutine consume
</span><span class='line'>    loop
</span><span class='line'>        while q is not empty
</span><span class='line'>            remove some items from q
</span><span class='line'>            use the items
</span><span class='line'>        yield to produce</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>注意到Lua的coroutine不支持上面的这种指定另外coroutine的特性，所以类似Lua的coroutine实现又被称为asymmetric coroutine(非对称协程)。</p>

<p>其实也可以使用多线程来实现上面例子中的生产者-消费者问题，但线程相比于协程的实现又有哪些区别呢？一般来说有以下几点不同：</p>

<ul>
  <li>线程需要有操作系统来调度，而coroutine则是由程序自己来调度</li>
  <li>线程的上下文切换开销较大，coroutine则要小的多</li>
  <li>线程会有竞争，coroutine则没有</li>
  <li>多线程的实现在某一时刻会有多个线程在运行，而coroutine则是只有一个</li>
</ul>

<p>[1] <a href="http://en.wikipedia.org/wiki/Coroutine" title="Coroutine From Wikipedia">Coroutine From Wikipedia</a><br />
[2] <a href="http://www.lua.org/manual/5.2/manual.html#2.6" title="Lua Coroutines Documentation">Lua Coroutines Documentation</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编程经验]]></title>
    <link href="http://liuxuan.info/blog/2011/12/25/programming-experience/"/>
    <updated>2011-12-25T15:09:00+08:00</updated>
    <id>http://liuxuan.info/blog/2011/12/25/programming-experience</id>
    <content type="html"><![CDATA[<p>今天在整理移动硬盘时发现的一篇收藏的旧文，再次读完后发现写的太好了，基本上涵盖了程序员会碰到的问题，不过可惜的是原文已经找不到了。我觉得把这篇文章作为编程指导更合适，所以记录在这里。</p>

<!-- more -->

<p>==========正文开始==========</p>

<p><strong>1.估算解决问题所需要的时间</strong></p>

<p>不要怕，承认吧！我曾见过一些程序员为了解决一个特殊问题而坐在显示器前面8小时。为自己定一个时间限制吧，1小时、30分钟或甚至15分钟。如果在这期间你不能解决问题，那就去寻求帮助，或到网上找答案，而不是尝试去做“超级堆码员”。</p>

<p><strong>2.编程语言是一种语言，只是一种语言</strong></p>

<p>随着时光推移，只要你理解了一种语言的原理，你会发现各种语言之间的相似之处 。你所选择的语言，你应该觉得“舒服”，并且能够写出有效（而且简洁）的代码。最重要的，让语言去适应项目，反之亦然。</p>

<p><strong>3.不要过于注重程序的“设计模式”</strong></p>

<p>有时候，写一个简单的算法，要比引入某种模式更容易。在多数情况下，程序代码应是简单易懂，甚至清洁工也能看懂。 </p>

<p><strong>4.经常备份代码</strong></p>

<p>在我年轻时，我就有过因硬盘故障而丢了大量代码的经历，这经历很恐怖的。只要你一次没有备份，就应当像有着严格的期限，客户明天就需要。此时就该版本控制软件大显身手了。</p>

<p><strong>5.承认自己并不是最顶尖的程序员 - 知不足</strong></p>

<p>我常想，我对编程了解已足够多，但是总有其他人比你优秀。正所谓，“一山总比一山高”。所以，向他们看齐吧！</p>

<p><strong>6.学习再学习</strong></p>

<p>正如第5点所说，我经常会在手里拿一本计算机或编程相关的杂志或书（不信，可以问我的朋友）。诚然，总有很多你不知道的技术，你可以从中学习以保持不落后。如果你有一种灵巧的方式来获取你需要的新技术，那你每天都应该坚持学习。</p>

<p><strong>7.永恒的变化</strong></p>

<p>你对待技术和编程知识，就应像你对待股票一样：多样化。不要在某一特定技 术上自我感觉良好。如果那种技术或语言已经没有足够支持，那你还不如现在就开始更新你的简历，并启动培训新计划。我能保持前行的主要原则是什么呢？至少了 解两到三种语言，所以，如果某种语言过时了，你在学习新技术的时候还可以依靠另一种语言。</p>

<p><strong>8.提携新人</strong></p>

<p>协助并且培养初级/入门的开发人员学习优秀的编程方法和技巧。也许你还不知道，在帮助他们向更高一层前进时，你自己也在向更高一层提升，你会更加自信。</p>

<p><strong>9.简化算法</strong></p>

<p>代码如恶魔，在你完成编码后，应回头并且优化它。从长远来看，这里或那里一些的改进，会让后来的支持人员更加轻松。</p>

<p><strong>10.编写文档</strong></p>

<p>无论是Web服务的API，还是一个简单的类，你尽量编写相应文档。我曾经引以为豪的代码注释，因过度注释而有人指责。给三行代码加一行注释，只需要你几秒时间。如果那是一个比较难以理解的技术，千万别担心过多注释。如果你能很好做好自己的工作，大多数架 构师、后备程序员、支持组都会感激你。</p>

<p><strong>11.测试、测试再测试</strong></p>

<p>我是一名黑盒测试粉丝。当你完成编码后，你“被认可”的时候就开始了。如果你们公司有QA部门，如果你的代码中有错误，那你得到的评论，会比项目经理还多。如果你不彻底测试自己的代码，那恐怕你开发的就不只是代码，可能还会声名狼藉。</p>

<p><strong>12.庆祝每一次成功</strong></p>

<p>我见过很多程序员在解决编程技术难题后，会和同伴握手、击掌或甚至手舞足蹈。每个人在生命中都会碰到“顿悟”。如果一个程序员高兴地跑来叫你去看他的非凡代码，也许你已经看过这样的代码100遍了，但你也应该为了这个家伙而庆祝第101次。（编者注：《庆祝成功的九种方式》。）</p>

<p><strong>13.经常检查代码</strong></p>

<p>在公司，你的代码要经常检查（包括自查和其他同事检查）。不要把别人的检查，看成是对代码风格的苛求。应该把它们看作是有建设性的批评。对个人来说，经常检查你的代码并且自问，“我怎样才能写得更好呢？” 这会让你加速你的成长，让你成为一个更优秀的程序员。</p>

<p><strong>14.回顾你的代码</strong></p>

<p>在看到自己以前的代码时，通常会有两种方式：“难以至信，这代码是我写的”和“难以至信，这代码是我写的”。第一种往往是厌恶的语气，并在想如何改进它。你也许会惊叹，旧代码也能复活成为一种更好的程序，甚至是一个完整的产品。第二种通常带着惊奇和成 就感。开发人员应该一到两个自己完成的项目成果，能让众人不禁而立并注目而观的项目。同样，基于你优越的编程能力，你可以把过去的程序或项目拿出来，把它们更新为更加优秀的产品或想法。</p>

<p><strong>15.幽默是不可缺的</strong></p>

<p>在我20年的开发生涯中，我还没有碰到哪位程序员是没有幽默感的。实际上，干我们这行，幽默是一项必备品。</p>

<p><strong>16.谨防那些无所不知的程序员，不愿分享的程序员，还有经验不足的程序员</strong></p>

<p>当你遇到这几种程序员时，你自己要谦虚。无所不知的程序员，更想当一个英雄而不是团队成员；保守的程序员则是在编写着他们独享的代码；而经验不足的程序员则会每十分钟就来问你一下，当代码完成后，代码已经是你的，而不是他们。</p>

<p><strong>17.任何项目都不会那么简单</strong></p>

<p>朋友、家人和同事曾请求我仓促做一些事情，仓促做一个程序或者网站。对于这样的事，应该 从双方做计划，才能做出令两方都会满意的东西。如果某人起初只是需要一个使用Microsoft Access的、只有有3个页面的网站，但来就很可能变成一个有15个页面的网站，并使用SQL Server，有一个论坛，还有一个定制的CMS（内容管理系统）。</p>

<p><strong>18.任何时候不要想当然</strong></p>

<p>假如你承接一个简单的项目，你可能会认为某个部分可以轻松完成。千万别这样想！除非你有一个类、组件、或者一段已经写好的代码，并且在现有的项目已经测试通过。不要认为这将是很容易的。</p>

<p><strong>19.没有已经完成的软件</strong></p>

<p>曾经有一位程序员告诉我，没有软件是已经完成的，它只是“暂时完成了”。这是明智的忠告。如果客户还在使用你写的程序，并经受了时间的考验。如果有机会，你仍在更新它，这并不是什么坏事，这让你不断地前行。</p>

<p><strong>20.耐心是一种美德</strong></p>

<p>当客户、朋友或家庭成员用电脑的时候，他们也许会受挫，进而想砸电脑，或气冲冲地离开。我一直在告诉他们，“是你掌控电脑，不是电脑掌控你。”对于用作编程的电脑，你要有一定的耐心。一旦程序员知道问题所在后，他们就会站在电脑的角度看问题，并且说 “哦，这就是为什么它是这样做。”</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASCII，Unicode和UTF-8的编码方式]]></title>
    <link href="http://liuxuan.info/blog/2011/10/16/ascii-unicode-utf-8/"/>
    <updated>2011-10-16T18:57:00+08:00</updated>
    <id>http://liuxuan.info/blog/2011/10/16/ascii-unicode-utf-8</id>
    <content type="html"><![CDATA[<p>原文地址：<a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" title="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html">http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html</a></p>

<p><strong>1.ASCII码</strong></p>

<p>我们知道，在计算机内部，所有的信息最终都表示为一个二进制的字符串。每一个二进制位（bit）有0和1两种状态，因此八个二进制位就可以组合出256种状态，这被称为一个字节（byte）。也就是说，一个字节一共可以用来表示256种不同的状态，每一个状态对应一个符号，就是256个符号，从0000000到11111111。上个世纪60年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为ASCII码，一直沿用至今。ASCII码一共规定了128个字符的编码，比如空格“SPACE”是32（二进制00100000），大写的字母A是65（二进制01000001）。这128个符号（包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，最前面的1位统一规定为0。 <!--more--></p>

<p><strong>2.非ASCII编码</strong></p>

<p>英语用128个符号编码就够了，但是用来表示其他语言，128个符号是不够的。比如，在法语中，字母上方有注音符号，它就无法用ASCII码表示。于是，一些欧洲国家就决定，利用字节中闲置的最高位编入新的符号。比如，法语中的é的编码为130（二进制10000010）。这样一来，这些欧洲国家使用的编码体系，可以表示最多256个符号。但是，这里又出现了新的问题。不同的国家有不同的字母，因此，哪怕它们都使用256个符号的编码方式，代表的字母却不一样。比如，130在法语编码中代表了é，在希伯来语编码中却代表了字母Gimel (ג)，在俄语编码中又会代表另一个符号。但是不管怎样，所有这些编码方式中，0—127表示的符号是一样的，不一样的只是128—255的这一段。至于亚洲国家的文字，使用的符号就更多了，汉字就多达10万左右。一个字节只能表示256种符号，肯定是不够的，就必须使用多个字节表达一个符号。比如，简体中文常见的编码方式是GB2312，使用两个字节表示一个汉字，所以理论上最多可以表示256x256=65536个符号。中文编码的问题需要专文讨论，这篇笔记不涉及。这里只指出，虽然都是用多个字节表示一个符号，但是GB类的汉字编码与后文的Unicode和UTF-8是毫无关系的。</p>

<p><strong>3.Unicode</strong></p>

<p>正如上一节所说，世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。为什么电子邮件常常出现乱码？就是因为发信人和收信人使用的编码方式不一样。可以想象，如果有一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码，那么乱码问题就会消失。这就是Unicode，就像它的名字都表示的，这是一种所有符号的编码。Unicode当然是一个很大的集合，现在的规模可以容纳100多万个符号。每个符号的编码都不一样，比如，U+0639表示阿拉伯字母Ain，U+0041表示英语的大写字母A，U+4E25表示汉字“严”。具体的符号对应表，可以查询unicode.org，或者专门的汉字对应表。</p>

<p><strong>4.Unicode的问题</strong></p>

<p>需要注意的是，Unicode只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。比如，汉字“严”的unicode是十六进制数4E25，转换成二进制数足足有15位（100111000100101），也就是说这个符号的表示至少需要2个字节。表示其他更大的符号，可能需要3个字节或者4个字节，甚至更多。</p>

<p>这里就有两个严重的问题，第一个问题是，如何才能区别unicode和ascii？计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？第二个问题是，我们已经知道，英文字母只用一个字节表示就够了，如果unicode统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是0，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的。它们造成的结果是：1）出现了unicode的多种存储方式，也就是说有许多种不同的二进制格式，可以用来表示unicode。2）unicode在很长一段时间内无法推广，直到互联网的出现。</p>

<p><strong>5.UTF-8</strong></p>

<p>互联网的普及，强烈要求出现一种统一的编码方式。UTF-8就是在互联网上使用最广的一种unicode的实现方式。其他实现方式还包括UTF-16和UTF-32，不过在互联网上基本不用。重复一遍，这里的关系是，UTF-8是Unicode的实现方式之一。UTF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。UTF-8的编码规则很简单，只有二条： <br />
1）对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。  <br />
2）对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。  </p>

<p>下表总结了编码规则，字母x表示可用编码的位。<br />
Unicode符号范围 | UTF-8编码方式<br />
(十六进制) | （二进制）<br />
——————–+————————————<br />
0000 0000-0000 007F | 0xxxxxxx<br />
0000 0080-0000 07FF | 110xxxxx 10xxxxxx<br />
0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx<br />
0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  </p>

<p>下面，还是以汉字“严”为例，演示如何实现UTF-8编码。<br />
已知“严”的unicode是4E25（100111000100101），根据上表，可以发现4E25处在第三行的范围内（0000 0800-0000 FFFF），因此“严”的UTF-8编码需要三个字节，即格式是“1110xxxx 10xxxxxx 10xxxxxx”。然后，从“严”的最后一个二进制位开始，依次从后向前填入格式中的x，多出的位补0。这样就得到了，“严”的UTF-8编码是“11100100 10111000 10100101”，转换成十六进制就是E4B8A5。</p>

<p><strong>6.Unicode与UTF-8之间的转换</strong></p>

<p>通过上一节的例子，可以看到“严”的Unicode码是4E25，UTF-8编码是E4B8A5，两者是不一样的。它们之间的转换可以通过程序实现。
在Windows平台下，有一个最简单的转化方法，就是使用内置的记事本小程序Notepad.exe。打开文件后，点击“文件”菜单中的“另存为”命令，会跳出一个对话框，在最底部有一个“编码”的下拉条。<br />
里面有四个选项：ANSI，Unicode，Unicode big endian 和 UTF-8。<br />
1）ANSI是默认的编码方式。对于英文文件是ASCII编码，对于简体中文文件是GB2312编码（只针对Windows简体中文版，如果是繁体中文版会采用Big5码）。<br />
2）Unicode编码指的是UCS-2编码方式，即直接用两个字节存入字符的Unicode码。这个选项用的little endian格式。<br />
3）Unicode big endian编码与上一个选项相对应。我在下一节会解释little endian和big endian的涵义。<br />
4）UTF-8编码，也就是上一节谈到的编码方法。<br />
选择完”编码方式“后，点击”保存“按钮，文件的编码方式就立刻转换好了。  </p>

<p><strong>7.Little endian和Big endian</strong></p>

<p>上一节已经提到，Unicode码可以采用UCS-2格式直接存储。以汉字”严“为例，Unicode码是4E25，需要用两个字节存储，一个字节是4E，另一个字节是25。存储的时候，4E在前，25在后，就是Big endian方式；25在前，4E在后，就是Little endian方式。这两个古怪的名称来自英国作家斯威夫特的《格列佛游记》。在该书中，小人国里爆发了内战，战争起因是人们争论，吃鸡蛋时究竟是从大头(Big-Endian)敲开还是从小头(Little-Endian)敲开。为了这件事情，前后爆发了六次战争，一个皇帝送了命，另一个皇帝丢了王位。因此，第一个字节在前，就是”大头方式“（Big endian），第二个字节在前就是”小头方式“（Little endian）。
那么很自然的，就会出现一个问题：计算机怎么知道某一个文件到底采用哪一种方式编码？</p>

<p>Unicode规范中定义，每一个文件的最前面分别加入一个表示编码顺序的字符，这个字符的名字叫做”零宽度非换行空格“（ZERO WIDTH NO-BREAK SPACE），用FEFF表示。这正好是两个字节，而且FF比FE大1。如果一个文本文件的头两个字节是FE FF，就表示该文件采用大头方式；如果头两个字节是FF FE，就表示该文件采用小头方式。</p>

<p><strong>8.实例</strong></p>

<p>下面，举一个实例。<br />
打开”记事本“程序Notepad.exe，新建一个文本文件，内容就是一个”严“字，依次采用ANSI，Unicode，Unicode big endian 和 UTF-8编码方式保存。然后，用文本编辑软件UltraEdit中的”十六进制功能“，观察该文件的内部编码方式。<br />
1）ANSI：文件的编码就是两个字节“D1 CF”，这正是“严”的GB2312编码，这也暗示GB2312是采用大头方式存储的。<br />
2）Unicode：编码是四个字节“FF FE 25 4E”，其中“FF FE”表明是小头方式存储，真正的编码是4E25。<br />
3）Unicode big endian：编码是四个字节“FE FF 4E 25”，其中“FE FF”表明是大头方式存储。<br />
4）UTF-8：编码是六个字节“EF BB BF E4 B8 A5”，前三个字节“EF BB BF”表示这是UTF-8编码，后三个“E4B8A5”就是“严”的具体编码，它的存储顺序与编码顺序是一致的。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[单精度浮点类型的二进制表示格式]]></title>
    <link href="http://liuxuan.info/blog/2011/08/01/single-precision-binary-floating-point-format/"/>
    <updated>2011-08-01T16:12:00+08:00</updated>
    <id>http://liuxuan.info/blog/2011/08/01/single-precision-binary-floating-point-format</id>
    <content type="html"><![CDATA[<p>这两天在<a href="http://stackoverflow.com" title="Stack Overflow">Stack Overflow</a>上闲逛的时候，发现有个关于Java中单精度浮点数（float）的问题:<a href="http://stackoverflow.com/questions/5849741/what-is-the-maximum-number-in-the-mantissa-part-of-a-java-float" title="what-is-the-maximum-number-in-the-mantissa-part-of-a-java-float">what-is-the-maximum-number-in-the-mantissa-part-of-a-java-float</a>。我不得不承认，我被震精了。因为以前只知道float在Java中占4个字节（即32位），并不知道它内部用来表示1个小数的具体格式是什么。我记得我以前刚学Java的时候，最开始要学的就是基本数据类型（当然其他语言也一样），那时候我就对1个小数用二进制来表示产生过疑问，而且，书上对这个也没有详细的解释。难道这个底层的float表示格式不重要吗？我觉得这个很重要，人家不是都有问题出来了么？那么就乘这次把float的底层的二进制表示格式搞清楚吧。 
<!--more--></p>

<p>在Java中，float采用的是<a href="http://en.wikipedia.org/wiki/IEEE_754-2008" title="IEEE Standard for Floating-Point Arithmetic (IEEE 754)">IEEE Standard for Floating-Point Arithmetic (IEEE 754)</a>标准,即float占4个字节，也就是32位，具体分配如下：</p>

<ul>
  <li>符号位：<strong>1</strong> 位</li>
  <li>幂底数位：<strong>8</strong> 位</li>
  <li>指数有效位：<strong>23</strong> 位</li>
</ul>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/e/e8/IEEE_754_Single_Floating_Point_Format.svg" alt="single precision float point format" /></p>

<p>1.符号位是从左边数起的第一位数，0代表正数或零，1代表负数，这个没有什么疑问。</p>

<p>2.幂底数位是从右边数起的第23位到第30位。我们需要注意的是，这个数是用<a href="http://en.wikipedia.org/wiki/Offset_binary" title="offset binary">偏移二进制（offset binary）</a>表示的，并不是用二进制的补码来表示，并且这个8位二进制数是没有符号位的。</p>

<p>这个偏移二进制与二进制补码的对应关系可以查看下面的表格：
&lt;table style="text-align:center；margin: 1em 1em 1em 0;background: #F9F9F9;border: 1px #AAA solid;border-collapse: collapse;color: black;"&gt;</p>
<tbody><tr>
<th>Offset Binary code, K=8</th>
<th>Decimal code</th>
<th>Twos' complement Binary</th>
</tr>
<tr>
<td>1111</td>
<td>7</td>
<td>0111</td>
</tr>
<tr>
<td>1110</td>
<td>6</td>
<td>0110</td>
</tr>
<tr>
<td>1101</td>
<td>5</td>
<td>0101</td>
</tr>
<tr>
<td>1100</td>
<td>4</td>
<td>0100</td>
</tr>
<tr>
<td>1011</td>
<td>3</td>
<td>0011</td>
</tr>
<tr>
<td>1010</td>
<td>2</td>
<td>0010</td>
</tr>
<tr>
<td>1001</td>
<td>1</td>
<td>0001</td>
</tr>
<tr>
<td>1000</td>
<td>0</td>
<td>0000</td>
</tr>
<tr>
<td>0111</td>
<td>−1</td>
<td>1111</td>
</tr>
<tr>
<td>0110</td>
<td>−2</td>
<td>1110</td>
</tr>
<tr>
<td>0101</td>
<td>−3</td>
<td>1101</td>
</tr>
<tr>
<td>0100</td>
<td>−4</td>
<td>1100</td>
</tr>
<tr>
<td>0011</td>
<td>−5</td>
<td>1011</td>
</tr>
<tr>
<td>0010</td>
<td>−6</td>
<td>1010</td>
</tr>
<tr>
<td>0001</td>
<td>−7</td>
<td>1001</td>
</tr>
<tr>
<td>0000</td>
<td>−8</td>
<td>1000</td>
</tr>
</tbody>
<p>&lt;/table&gt;</p>

<p>我们可以从上面的表格看到，偏移和补码的区别只是最高位的区别（右边数起）。当补码最高为是1的（也就是这个数是负数）时候，偏移表示的最高位是0，反之亦然。好了，既然指数的有效位使用偏移来表示的话，那么它的值就不是实际真正的值，而是要用它来与偏移量相减，从而得到真正的指数有效位值。这个偏移量为2<sup>n−1</sup>−1 ，其中n为所有位数。例如float里是用8位来表示，那么偏移量就是127。</p>

<p>细心的朋友可能会发现应该减去2<sup>n-1</sup>才是真正的值，但是为什么不减去2<sup>n</sup>，而是减去2<sup>n−1</sup>−1呢？<a href="http://en.wikipedia.org/wiki/Offset_binary&quot;" title="offset binary">维基</a>上是这么说的：</p>

<blockquote>
  <p>Unusually however, instead of using “excess 2^(n-1)” it uses “excess 2^(n-1)-1” which means that inverting the leading (high-order) bit of the exponent will not convert the exponent to correct twos’ complement notation.</p>
</blockquote>

<p>也就是说这是有意这么做的，为了不把指数转换成正确的二进制补码形式。我搞不懂为什么要这样做，所以就在StackOverflow上提了个<a href="http://stackoverflow.com/questions/6871501/offset-binary-format-for-float-in-java" title="offset-binary-format-for-float-in-java">问题</a>，大家可以参考一下。</p>

<p>这样一来，8位无符号指数的范围是0-255，再减去偏移量127，结果则为-127-128。另外全0和全1作为特殊处理,所以表示范围就变成了-126到127。特殊处理说明参考下表：
&lt;table style="text-align:center；margin: 1em 1em 1em 0;background: #F9F9F9;border: 1px #AAA solid;border-collapse: collapse;color: black;"&gt;</p>
<tbody><tr>
<th>Exponent</th>
<th>Significand zero</th>
<th>Significand non-zero</th>
<th>Equation</th>
</tr>
<tr>
<td>00<sub>H</sub></td>
<td><a href="http://en.wikipedia.org/wiki/0_(number)" title="0 (number)">zero</a>, <a href="http://en.wikipedia.org/wiki/%E2%88%920" title="−0" class="mw-redirect">−0</a></td>
<td><a href="http://en.wikipedia.org/wiki/Subnormal_numbers" title="Subnormal numbers" class="mw-redirect">subnormal numbers</a></td>
<td>(−1)<sup>signbits</sup>×2<sup>−126</sup>× 0.significandbits</td>
</tr>
<tr>
<td>01<sub>H</sub>, ..., FE<sub>H</sub></td>
<td colspan="2">normalized value</td>
<td>(−1)<sup>signbits</sup>×2<sup>exponentbits−127</sup>× 1.significandbits</td>
</tr>
<tr>
<td>FF<sub>H</sub></td>
<td>±<a href="http://en.wikipedia.org/wiki/Infinity" title="Infinity">infinity</a></td>
<td><a href="http://en.wikipedia.org/wiki/NaN" title="NaN">NaN</a> (quiet, signalling)</td>
</tr>
</tbody>
<p>&lt;/table&gt;</p>

<p>3.剩下的23位就是所谓的小数位了。但是注意：如果这23位全部是0的话，最高位将多出1位来，且这位上的值是1。</p>

<p>好了，这样所有32位都有了，自然可以得到二进制转换成十进制的推导公式为：</p>

<p><img src="http://upload.wikimedia.org/math/1/d/e/1de9cd706cf2343bf03714ed2d4e4e65.png" alt="formula" /></p>

<p>对应到上图的例子为：</p>

<p><img src="http://upload.wikimedia.org/math/2/5/6/2567776ddd65d7deb6b0a8e63dd82e52.png" alt="example" /></p>

<p>最后，双精度浮点数（double）的64位分配和单精度数差不多，具体情况如下图所示：
<img src="http://upload.wikimedia.org/wikipedia/commons/thumb/a/a9/IEEE_754_Double_Floating_Point_Format.svg/618px-IEEE_754_Double_Floating_Point_Format.svg.png" alt="double precision floating-point format" /></p>

<p>参考文章</p>

<p>[1] <a href="http://en.wikipedia.org/wiki/Single_precision_floating-point_format" title="Single_precision_floating-point_format">Single_precision_floating-point_format</a><br />
[2] [IEEE<em>754-1985#Exponent_biasing](http://en.wikipedia.org/wiki/IEEE</em>754-1985#Exponent_biasing “IEEE_754-1985#Exponent_biasing”)</p>

]]></content>
  </entry>
  
</feed>
